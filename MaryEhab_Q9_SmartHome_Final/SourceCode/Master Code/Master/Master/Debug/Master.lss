
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000157a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022a  00800060  0000157a  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080028a  0080028a  00001838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038bc  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8a  00000000  00000000  00005368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6e  00000000  00000000  000060f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00007c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085b  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002149  00000000  00000000  00008863  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	a5 07       	cpc	r26, r21
      56:	09 08       	sbc	r0, r9
      58:	a2 08       	sbc	r10, r2
      5a:	a9 08       	sbc	r10, r9
      5c:	b0 08       	sbc	r11, r0
      5e:	b7 08       	sbc	r11, r7
      60:	c1 08       	sbc	r12, r1
      62:	58 08       	sbc	r5, r8
      64:	c9 08       	sbc	r12, r9
      66:	62 09       	sbc	r22, r2

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 38       	cpi	r26, 0x8A	; 138
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e8       	ldi	r26, 0x8A	; 138
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 38       	cpi	r26, 0x8D	; 141
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 95 04 	call	0x92a	; 0x92a <main>
      9e:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_vsetPINDir>:
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
      a6:	82 34       	cpi	r24, 0x42	; 66
      a8:	19 f1       	breq	.+70     	; 0xf0 <DIO_vsetPINDir+0x4a>
      aa:	18 f4       	brcc	.+6      	; 0xb2 <DIO_vsetPINDir+0xc>
      ac:	81 34       	cpi	r24, 0x41	; 65
      ae:	39 f0       	breq	.+14     	; 0xbe <DIO_vsetPINDir+0x18>
      b0:	08 95       	ret
      b2:	83 34       	cpi	r24, 0x43	; 67
      b4:	b1 f1       	breq	.+108    	; 0x122 <DIO_vsetPINDir+0x7c>
      b6:	84 34       	cpi	r24, 0x44	; 68
      b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vsetPINDir+0x16>
      ba:	4c c0       	rjmp	.+152    	; 0x154 <DIO_vsetPINDir+0xae>
      bc:	08 95       	ret
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	59 f4       	brne	.+22     	; 0xd8 <DIO_vsetPINDir+0x32>
      c2:	2a b3       	in	r18, 0x1a	; 26
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_vsetPINDir+0x28>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	6a 95       	dec	r22
      d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_vsetPINDir+0x24>
      d2:	82 2b       	or	r24, r18
      d4:	8a bb       	out	0x1a, r24	; 26
      d6:	08 95       	ret
      d8:	2a b3       	in	r18, 0x1a	; 26
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_vsetPINDir+0x3e>
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	6a 95       	dec	r22
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_vsetPINDir+0x3a>
      e8:	80 95       	com	r24
      ea:	82 23       	and	r24, r18
      ec:	8a bb       	out	0x1a, r24	; 26
      ee:	08 95       	ret
      f0:	41 30       	cpi	r20, 0x01	; 1
      f2:	59 f4       	brne	.+22     	; 0x10a <DIO_vsetPINDir+0x64>
      f4:	27 b3       	in	r18, 0x17	; 23
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x5a>
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x56>
     104:	82 2b       	or	r24, r18
     106:	87 bb       	out	0x17, r24	; 23
     108:	08 95       	ret
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x70>
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x6c>
     11a:	80 95       	com	r24
     11c:	82 23       	and	r24, r18
     11e:	87 bb       	out	0x17, r24	; 23
     120:	08 95       	ret
     122:	41 30       	cpi	r20, 0x01	; 1
     124:	59 f4       	brne	.+22     	; 0x13c <DIO_vsetPINDir+0x96>
     126:	24 b3       	in	r18, 0x14	; 20
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPINDir+0x8c>
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPINDir+0x88>
     136:	82 2b       	or	r24, r18
     138:	84 bb       	out	0x14, r24	; 20
     13a:	08 95       	ret
     13c:	24 b3       	in	r18, 0x14	; 20
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_vsetPINDir+0xa2>
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	6a 95       	dec	r22
     14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_vsetPINDir+0x9e>
     14c:	80 95       	com	r24
     14e:	82 23       	and	r24, r18
     150:	84 bb       	out	0x14, r24	; 20
     152:	08 95       	ret
     154:	41 30       	cpi	r20, 0x01	; 1
     156:	59 f4       	brne	.+22     	; 0x16e <DIO_vsetPINDir+0xc8>
     158:	21 b3       	in	r18, 0x11	; 17
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_vsetPINDir+0xbe>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_vsetPINDir+0xba>
     168:	82 2b       	or	r24, r18
     16a:	81 bb       	out	0x11, r24	; 17
     16c:	08 95       	ret
     16e:	21 b3       	in	r18, 0x11	; 17
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_vsetPINDir+0xd4>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	6a 95       	dec	r22
     17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_vsetPINDir+0xd0>
     17e:	80 95       	com	r24
     180:	82 23       	and	r24, r18
     182:	81 bb       	out	0x11, r24	; 17
     184:	08 95       	ret

00000186 <DIO_write>:
     186:	82 34       	cpi	r24, 0x42	; 66
     188:	19 f1       	breq	.+70     	; 0x1d0 <DIO_write+0x4a>
     18a:	18 f4       	brcc	.+6      	; 0x192 <DIO_write+0xc>
     18c:	81 34       	cpi	r24, 0x41	; 65
     18e:	39 f0       	breq	.+14     	; 0x19e <DIO_write+0x18>
     190:	08 95       	ret
     192:	83 34       	cpi	r24, 0x43	; 67
     194:	b1 f1       	breq	.+108    	; 0x202 <DIO_write+0x7c>
     196:	84 34       	cpi	r24, 0x44	; 68
     198:	09 f4       	brne	.+2      	; 0x19c <DIO_write+0x16>
     19a:	4c c0       	rjmp	.+152    	; 0x234 <DIO_write+0xae>
     19c:	08 95       	ret
     19e:	41 30       	cpi	r20, 0x01	; 1
     1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_write+0x32>
     1a2:	2b b3       	in	r18, 0x1b	; 27
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_write+0x28>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_write+0x24>
     1b2:	82 2b       	or	r24, r18
     1b4:	8b bb       	out	0x1b, r24	; 27
     1b6:	08 95       	ret
     1b8:	2b b3       	in	r18, 0x1b	; 27
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_write+0x3e>
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	6a 95       	dec	r22
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_write+0x3a>
     1c8:	80 95       	com	r24
     1ca:	82 23       	and	r24, r18
     1cc:	8b bb       	out	0x1b, r24	; 27
     1ce:	08 95       	ret
     1d0:	41 30       	cpi	r20, 0x01	; 1
     1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_write+0x64>
     1d4:	28 b3       	in	r18, 0x18	; 24
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_write+0x5a>
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	6a 95       	dec	r22
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_write+0x56>
     1e4:	82 2b       	or	r24, r18
     1e6:	88 bb       	out	0x18, r24	; 24
     1e8:	08 95       	ret
     1ea:	28 b3       	in	r18, 0x18	; 24
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_write+0x70>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	6a 95       	dec	r22
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_write+0x6c>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	88 bb       	out	0x18, r24	; 24
     200:	08 95       	ret
     202:	41 30       	cpi	r20, 0x01	; 1
     204:	59 f4       	brne	.+22     	; 0x21c <DIO_write+0x96>
     206:	25 b3       	in	r18, 0x15	; 21
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_write+0x8c>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_write+0x88>
     216:	82 2b       	or	r24, r18
     218:	85 bb       	out	0x15, r24	; 21
     21a:	08 95       	ret
     21c:	25 b3       	in	r18, 0x15	; 21
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_write+0xa2>
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	6a 95       	dec	r22
     22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_write+0x9e>
     22c:	80 95       	com	r24
     22e:	82 23       	and	r24, r18
     230:	85 bb       	out	0x15, r24	; 21
     232:	08 95       	ret
     234:	41 30       	cpi	r20, 0x01	; 1
     236:	59 f4       	brne	.+22     	; 0x24e <DIO_write+0xc8>
     238:	22 b3       	in	r18, 0x12	; 18
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write+0xbe>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	6a 95       	dec	r22
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write+0xba>
     248:	82 2b       	or	r24, r18
     24a:	82 bb       	out	0x12, r24	; 18
     24c:	08 95       	ret
     24e:	22 b3       	in	r18, 0x12	; 18
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0xd4>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	6a 95       	dec	r22
     25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0xd0>
     25e:	80 95       	com	r24
     260:	82 23       	and	r24, r18
     262:	82 bb       	out	0x12, r24	; 18
     264:	08 95       	ret

00000266 <DIO_u8read>:
     266:	82 34       	cpi	r24, 0x42	; 66
     268:	e9 f0       	breq	.+58     	; 0x2a4 <DIO_u8read+0x3e>
     26a:	18 f4       	brcc	.+6      	; 0x272 <DIO_u8read+0xc>
     26c:	81 34       	cpi	r24, 0x41	; 65
     26e:	31 f0       	breq	.+12     	; 0x27c <DIO_u8read+0x16>
     270:	55 c0       	rjmp	.+170    	; 0x31c <DIO_u8read+0xb6>
     272:	83 34       	cpi	r24, 0x43	; 67
     274:	59 f1       	breq	.+86     	; 0x2cc <DIO_u8read+0x66>
     276:	84 34       	cpi	r24, 0x44	; 68
     278:	e9 f1       	breq	.+122    	; 0x2f4 <DIO_u8read+0x8e>
     27a:	50 c0       	rjmp	.+160    	; 0x31c <DIO_u8read+0xb6>
     27c:	49 b3       	in	r20, 0x19	; 25
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	9c 01       	movw	r18, r24
     284:	06 2e       	mov	r0, r22
     286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8read+0x26>
     288:	22 0f       	add	r18, r18
     28a:	33 1f       	adc	r19, r19
     28c:	0a 94       	dec	r0
     28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8read+0x22>
     290:	84 2f       	mov	r24, r20
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 23       	and	r24, r18
     296:	93 23       	and	r25, r19
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_u8read+0x38>
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	6a 95       	dec	r22
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_u8read+0x34>
     2a2:	08 95       	ret
     2a4:	46 b3       	in	r20, 0x16	; 22
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	9c 01       	movw	r18, r24
     2ac:	06 2e       	mov	r0, r22
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_u8read+0x4e>
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
     2b4:	0a 94       	dec	r0
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_u8read+0x4a>
     2b8:	84 2f       	mov	r24, r20
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	82 23       	and	r24, r18
     2be:	93 23       	and	r25, r19
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_u8read+0x60>
     2c2:	95 95       	asr	r25
     2c4:	87 95       	ror	r24
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_u8read+0x5c>
     2ca:	08 95       	ret
     2cc:	43 b3       	in	r20, 0x13	; 19
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9c 01       	movw	r18, r24
     2d4:	06 2e       	mov	r0, r22
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_u8read+0x76>
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_u8read+0x72>
     2e0:	84 2f       	mov	r24, r20
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	82 23       	and	r24, r18
     2e6:	93 23       	and	r25, r19
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_u8read+0x88>
     2ea:	95 95       	asr	r25
     2ec:	87 95       	ror	r24
     2ee:	6a 95       	dec	r22
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_u8read+0x84>
     2f2:	08 95       	ret
     2f4:	40 b3       	in	r20, 0x10	; 16
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9c 01       	movw	r18, r24
     2fc:	06 2e       	mov	r0, r22
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_u8read+0x9e>
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_u8read+0x9a>
     308:	84 2f       	mov	r24, r20
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	82 23       	and	r24, r18
     30e:	93 23       	and	r25, r19
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_u8read+0xb0>
     312:	95 95       	asr	r25
     314:	87 95       	ror	r24
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_u8read+0xac>
     31a:	08 95       	ret
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	08 95       	ret

00000320 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
	switch(portname)
     320:	82 34       	cpi	r24, 0x42	; 66
     322:	61 f1       	breq	.+88     	; 0x37c <DIO_vconnectpullup+0x5c>
     324:	18 f4       	brcc	.+6      	; 0x32c <DIO_vconnectpullup+0xc>
     326:	81 34       	cpi	r24, 0x41	; 65
     328:	41 f0       	breq	.+16     	; 0x33a <DIO_vconnectpullup+0x1a>
     32a:	08 95       	ret
     32c:	83 34       	cpi	r24, 0x43	; 67
     32e:	09 f4       	brne	.+2      	; 0x332 <DIO_vconnectpullup+0x12>
     330:	46 c0       	rjmp	.+140    	; 0x3be <DIO_vconnectpullup+0x9e>
     332:	84 34       	cpi	r24, 0x44	; 68
     334:	09 f4       	brne	.+2      	; 0x338 <DIO_vconnectpullup+0x18>
     336:	64 c0       	rjmp	.+200    	; 0x400 <__EEPROM_REGION_LENGTH__>
     338:	08 95       	ret
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
     33a:	41 30       	cpi	r20, 0x01	; 1
     33c:	99 f4       	brne	.+38     	; 0x364 <DIO_vconnectpullup+0x44>
		{
			CLR_BIT(SFIOR,PUD);
     33e:	80 b7       	in	r24, 0x30	; 48
     340:	8b 7f       	andi	r24, 0xFB	; 251
     342:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRA,pinnumber);
     344:	2a b3       	in	r18, 0x1a	; 26
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vconnectpullup+0x30>
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	6a 95       	dec	r22
     352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vconnectpullup+0x2c>
     354:	98 2f       	mov	r25, r24
     356:	90 95       	com	r25
     358:	92 23       	and	r25, r18
     35a:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pinnumber);
     35c:	9b b3       	in	r25, 0x1b	; 27
     35e:	89 2b       	or	r24, r25
     360:	8b bb       	out	0x1b, r24	; 27
     362:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     364:	2b b3       	in	r18, 0x1b	; 27
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_vconnectpullup+0x50>
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	6a 95       	dec	r22
     372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_vconnectpullup+0x4c>
     374:	80 95       	com	r24
     376:	82 23       	and	r24, r18
     378:	8b bb       	out	0x1b, r24	; 27
     37a:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
     37c:	41 30       	cpi	r20, 0x01	; 1
     37e:	99 f4       	brne	.+38     	; 0x3a6 <DIO_vconnectpullup+0x86>
		{
			CLR_BIT(SFIOR,PUD);
     380:	80 b7       	in	r24, 0x30	; 48
     382:	8b 7f       	andi	r24, 0xFB	; 251
     384:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRB,pinnumber);
     386:	27 b3       	in	r18, 0x17	; 23
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_vconnectpullup+0x72>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	6a 95       	dec	r22
     394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_vconnectpullup+0x6e>
     396:	98 2f       	mov	r25, r24
     398:	90 95       	com	r25
     39a:	92 23       	and	r25, r18
     39c:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pinnumber);
     39e:	98 b3       	in	r25, 0x18	; 24
     3a0:	89 2b       	or	r24, r25
     3a2:	88 bb       	out	0x18, r24	; 24
     3a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     3a6:	28 b3       	in	r18, 0x18	; 24
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_vconnectpullup+0x92>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	6a 95       	dec	r22
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_vconnectpullup+0x8e>
     3b6:	80 95       	com	r24
     3b8:	82 23       	and	r24, r18
     3ba:	88 bb       	out	0x18, r24	; 24
     3bc:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
     3be:	41 30       	cpi	r20, 0x01	; 1
     3c0:	99 f4       	brne	.+38     	; 0x3e8 <DIO_vconnectpullup+0xc8>
		{
			CLR_BIT(SFIOR,PUD);
     3c2:	80 b7       	in	r24, 0x30	; 48
     3c4:	8b 7f       	andi	r24, 0xFB	; 251
     3c6:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRC,pinnumber);
     3c8:	24 b3       	in	r18, 0x14	; 20
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_vconnectpullup+0xb4>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	6a 95       	dec	r22
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_vconnectpullup+0xb0>
     3d8:	98 2f       	mov	r25, r24
     3da:	90 95       	com	r25
     3dc:	92 23       	and	r25, r18
     3de:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pinnumber);
     3e0:	95 b3       	in	r25, 0x15	; 21
     3e2:	89 2b       	or	r24, r25
     3e4:	85 bb       	out	0x15, r24	; 21
     3e6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     3e8:	25 b3       	in	r18, 0x15	; 21
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_vconnectpullup+0xd4>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	6a 95       	dec	r22
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_vconnectpullup+0xd0>
     3f8:	80 95       	com	r24
     3fa:	82 23       	and	r24, r18
     3fc:	85 bb       	out	0x15, r24	; 21
     3fe:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
     400:	41 30       	cpi	r20, 0x01	; 1
     402:	99 f4       	brne	.+38     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			CLR_BIT(SFIOR,PUD);
     404:	80 b7       	in	r24, 0x30	; 48
     406:	8b 7f       	andi	r24, 0xFB	; 251
     408:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRD,pinnumber);
     40a:	21 b3       	in	r18, 0x11	; 17
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	6a 95       	dec	r22
     418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     41a:	98 2f       	mov	r25, r24
     41c:	90 95       	com	r25
     41e:	92 23       	and	r25, r18
     420:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pinnumber);
     422:	92 b3       	in	r25, 0x12	; 18
     424:	89 2b       	or	r24, r25
     426:	82 bb       	out	0x12, r24	; 18
     428:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     42a:	22 b3       	in	r18, 0x12	; 18
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	6a 95       	dec	r22
     438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     43a:	80 95       	com	r24
     43c:	82 23       	and	r24, r18
     43e:	82 bb       	out	0x12, r24	; 18
     440:	08 95       	ret

00000442 <EEPROM_ui8ReadByteFromAddress>:
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     442:	e1 99       	sbic	0x1c, 1	; 28
     444:	fe cf       	rjmp	.-4      	; 0x442 <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
     446:	9f bb       	out	0x1f, r25	; 31
     448:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     44a:	8c b3       	in	r24, 0x1c	; 28
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     450:	8d b3       	in	r24, 0x1d	; 29
}
     452:	08 95       	ret

00000454 <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
     454:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     456:	e1 99       	sbic	0x1c, 1	; 28
     458:	fe cf       	rjmp	.-4      	; 0x456 <EEPROM_vReadBlockFromAddress+0x2>
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	0f c0       	rjmp	.+30     	; 0x47e <EEPROM_vReadBlockFromAddress+0x2a>
	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
     460:	f9 01       	movw	r30, r18
     462:	ea 0f       	add	r30, r26
     464:	fb 1f       	adc	r31, r27
     466:	ff bb       	out	0x1f, r31	; 31
     468:	ee bb       	out	0x1e, r30	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     46a:	9c b3       	in	r25, 0x1c	; 28
     46c:	91 60       	ori	r25, 0x01	; 1
     46e:	9c bb       	out	0x1c, r25	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     470:	fb 01       	movw	r30, r22
     472:	e2 0f       	add	r30, r18
     474:	f3 1f       	adc	r31, r19
     476:	9d b3       	in	r25, 0x1d	; 29
     478:	90 83       	st	Z, r25

		counter++;//increase the bytes counter
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     47e:	24 17       	cp	r18, r20
     480:	35 07       	cpc	r19, r21
     482:	70 f3       	brcs	.-36     	; 0x460 <EEPROM_vReadBlockFromAddress+0xc>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
     484:	08 95       	ret

00000486 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     486:	e1 99       	sbic	0x1c, 1	; 28
     488:	fe cf       	rjmp	.-4      	; 0x486 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     48a:	9f bb       	out	0x1f, r25	; 31
     48c:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     48e:	8c b3       	in	r24, 0x1c	; 28
     490:	81 60       	ori	r24, 0x01	; 1
     492:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     494:	8d b3       	in	r24, 0x1d	; 29
     496:	86 17       	cp	r24, r22
     498:	39 f0       	breq	.+14     	; 0x4a8 <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     49a:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     49c:	8c b3       	in	r24, 0x1c	; 28
     49e:	84 60       	ori	r24, 0x04	; 4
     4a0:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     4a2:	8c b3       	in	r24, 0x1c	; 28
     4a4:	82 60       	ori	r24, 0x02	; 2
     4a6:	8c bb       	out	0x1c, r24	; 28
     4a8:	08 95       	ret

000004aa <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	dc 01       	movw	r26, r24
     4b0:	ea 01       	movw	r28, r20
	uint16 counter = 0;//Bytes write counter
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
     4b6:	1a c0       	rjmp	.+52     	; 0x4ec <EEPROM_vWriteBlockToAddress+0x42>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     4b8:	e1 99       	sbic	0x1c, 1	; 28
     4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <EEPROM_vWriteBlockToAddress+0xe>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     4bc:	c9 01       	movw	r24, r18
     4be:	8a 0f       	add	r24, r26
     4c0:	9b 1f       	adc	r25, r27
     4c2:	9f bb       	out	0x1f, r25	; 31
     4c4:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     4c6:	9c b3       	in	r25, 0x1c	; 28
     4c8:	91 60       	ori	r25, 0x01	; 1
     4ca:	9c bb       	out	0x1c, r25	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     4cc:	5d b3       	in	r21, 0x1d	; 29
     4ce:	fb 01       	movw	r30, r22
     4d0:	e2 0f       	add	r30, r18
     4d2:	f3 1f       	adc	r31, r19
     4d4:	90 81       	ld	r25, Z
     4d6:	59 17       	cp	r21, r25
     4d8:	39 f0       	breq	.+14     	; 0x4e8 <EEPROM_vWriteBlockToAddress+0x3e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     4da:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     4dc:	9c b3       	in	r25, 0x1c	; 28
     4de:	94 60       	ori	r25, 0x04	; 4
     4e0:	9c bb       	out	0x1c, r25	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     4e2:	9c b3       	in	r25, 0x1c	; 28
     4e4:	92 60       	ori	r25, 0x02	; 2
     4e6:	9c bb       	out	0x1c, r25	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
     4ec:	2c 17       	cp	r18, r28
     4ee:	3d 07       	cpc	r19, r29
     4f0:	18 f3       	brcs	.-58     	; 0x4b8 <EEPROM_vWriteBlockToAddress+0xe>
		{

		}
		counter++;//increase bytes counter
	}
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <hlcd_sendCMD>:
/************************************************************************/
/*                          Functions' definitions                      */
/************************************************************************/

static void hlcd_sendCMD(uint8 au8_cmd)
{
     4f8:	cf 93       	push	r28
     4fa:	c8 2f       	mov	r28, r24
	/*Writing over LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_RW, 0);
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Sending command over LCD*/	
	DIO_write(HLCD_CONTROL_PORT, HLCD_RS, 0);
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Transferring the 1 nibble bits*/
	DIO_write(HLCD_DATA_PORT, HLCD_DB7, DIO_u8read(au8_cmd, 7));
     510:	67 e0       	ldi	r22, 0x07	; 7
     512:	8c 2f       	mov	r24, r28
     514:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     518:	48 2f       	mov	r20, r24
     51a:	67 e0       	ldi	r22, 0x07	; 7
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB6, DIO_u8read(au8_cmd, 6));
     522:	66 e0       	ldi	r22, 0x06	; 6
     524:	8c 2f       	mov	r24, r28
     526:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     52a:	48 2f       	mov	r20, r24
     52c:	66 e0       	ldi	r22, 0x06	; 6
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB5, DIO_u8read(au8_cmd, 5));
     534:	65 e0       	ldi	r22, 0x05	; 5
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     53c:	48 2f       	mov	r20, r24
     53e:	65 e0       	ldi	r22, 0x05	; 5
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB4, DIO_u8read(au8_cmd, 4));
     546:	64 e0       	ldi	r22, 0x04	; 4
     548:	8c 2f       	mov	r24, r28
     54a:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     54e:	48 2f       	mov	r20, r24
     550:	64 e0       	ldi	r22, 0x04	; 4
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Trigger writing over the LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 0);
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	63 e0       	ldi	r22, 0x03	; 3
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     562:	85 e8       	ldi	r24, 0x85	; 133
     564:	8a 95       	dec	r24
     566:	f1 f7       	brne	.-4      	; 0x564 <hlcd_sendCMD+0x6c>
     568:	00 00       	nop
	_delay_us(50);
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 1);
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>

	/*Transferring the 0 nibble bits*/	
	DIO_write(HLCD_DATA_PORT, HLCD_DB7, DIO_u8read(au8_cmd, 3));
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	8c 2f       	mov	r24, r28
     578:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     57c:	48 2f       	mov	r20, r24
     57e:	67 e0       	ldi	r22, 0x07	; 7
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB6, DIO_u8read(au8_cmd, 2));
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	8c 2f       	mov	r24, r28
     58a:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     58e:	48 2f       	mov	r20, r24
     590:	66 e0       	ldi	r22, 0x06	; 6
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB5, DIO_u8read(au8_cmd, 1));
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	8c 2f       	mov	r24, r28
     59c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     5a0:	48 2f       	mov	r20, r24
     5a2:	65 e0       	ldi	r22, 0x05	; 5
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB4, DIO_u8read(au8_cmd, 0));
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	8c 2f       	mov	r24, r28
     5ae:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     5b2:	48 2f       	mov	r20, r24
     5b4:	64 e0       	ldi	r22, 0x04	; 4
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>

	/*Trigger writing over the LCD*/	
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 0);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	63 e0       	ldi	r22, 0x03	; 3
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     5c6:	85 e8       	ldi	r24, 0x85	; 133
     5c8:	8a 95       	dec	r24
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <hlcd_sendCMD+0xd0>
     5cc:	00 00       	nop
	_delay_us(50);
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 1);	
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	63 e0       	ldi	r22, 0x03	; 3
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Return from this function*/
	return;
}
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <hlcd_sendData>:

static void hlcd_sendData(uint8 au8_data)
{
     5dc:	cf 93       	push	r28
     5de:	c8 2f       	mov	r28, r24
	/*Writing over LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_RW, 0);
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Sending display data over LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_RS, 1);
     5ea:	41 e0       	ldi	r20, 0x01	; 1
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Transferring the 1 nibble bits*/
	DIO_write(HLCD_DATA_PORT, HLCD_DB7, DIO_u8read(au8_data, 7));
     5f4:	67 e0       	ldi	r22, 0x07	; 7
     5f6:	8c 2f       	mov	r24, r28
     5f8:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     5fc:	48 2f       	mov	r20, r24
     5fe:	67 e0       	ldi	r22, 0x07	; 7
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB6, DIO_u8read(au8_data, 6));
     606:	66 e0       	ldi	r22, 0x06	; 6
     608:	8c 2f       	mov	r24, r28
     60a:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     60e:	48 2f       	mov	r20, r24
     610:	66 e0       	ldi	r22, 0x06	; 6
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB5, DIO_u8read(au8_data, 5));
     618:	65 e0       	ldi	r22, 0x05	; 5
     61a:	8c 2f       	mov	r24, r28
     61c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     620:	48 2f       	mov	r20, r24
     622:	65 e0       	ldi	r22, 0x05	; 5
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB4, DIO_u8read(au8_data, 4));
     62a:	64 e0       	ldi	r22, 0x04	; 4
     62c:	8c 2f       	mov	r24, r28
     62e:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     632:	48 2f       	mov	r20, r24
     634:	64 e0       	ldi	r22, 0x04	; 4
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Trigger writing over the LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 0);
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     646:	85 e8       	ldi	r24, 0x85	; 133
     648:	8a 95       	dec	r24
     64a:	f1 f7       	brne	.-4      	; 0x648 <hlcd_sendData+0x6c>
     64c:	00 00       	nop
	_delay_us(50);
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 1);
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	63 e0       	ldi	r22, 0x03	; 3
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>

	/*Transferring the 0 nibble bits*/
	DIO_write(HLCD_DATA_PORT, HLCD_DB7, DIO_u8read(au8_data, 3));
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	8c 2f       	mov	r24, r28
     65c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     660:	48 2f       	mov	r20, r24
     662:	67 e0       	ldi	r22, 0x07	; 7
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB6, DIO_u8read(au8_data, 2));
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     672:	48 2f       	mov	r20, r24
     674:	66 e0       	ldi	r22, 0x06	; 6
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB5, DIO_u8read(au8_data, 1));
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	8c 2f       	mov	r24, r28
     680:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     684:	48 2f       	mov	r20, r24
     686:	65 e0       	ldi	r22, 0x05	; 5
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB4, DIO_u8read(au8_data, 0));
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	8c 2f       	mov	r24, r28
     692:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
     696:	48 2f       	mov	r20, r24
     698:	64 e0       	ldi	r22, 0x04	; 4
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>

	/*Trigger writing over the LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 0);
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	63 e0       	ldi	r22, 0x03	; 3
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     6aa:	85 e8       	ldi	r24, 0x85	; 133
     6ac:	8a 95       	dec	r24
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <hlcd_sendData+0xd0>
     6b0:	00 00       	nop
	_delay_us(50);
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 1);
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>

	/*Return from this function*/
	return;
}
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <hlcd_init>:

void hlcd_init(void)
{
	/*LCD data pins initialization as 1*/
	DIO_vsetPINDir(HLCD_DATA_PORT, (HLCD_DB4 | HLCD_DB5 | HLCD_DB6 | HLCD_DB7), 1);	
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	67 e0       	ldi	r22, 0x07	; 7
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	
	/*LCD control pins initialization as 1*/
	DIO_vsetPINDir(HLCD_CONTROL_PORT, (HLCD_RS | HLCD_RW | HLCD_EN), 1);
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 1);
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	63 e0       	ldi	r22, 0x03	; 3
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6de:	2f e7       	ldi	r18, 0x7F	; 127
     6e0:	88 e3       	ldi	r24, 0x38	; 56
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <hlcd_init+0x24>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <hlcd_init+0x2e>
     6ee:	00 00       	nop
	
	/*Wait until Vdd rises to 4.5v*/
	_delay_ms(50);
	
	/*Writing over LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_RW, 0);
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	62 e0       	ldi	r22, 0x02	; 2
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Sending command over LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_RS, 0);
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Transferring the function set instruction header (4-bits)*/
	DIO_write(HLCD_DATA_PORT, HLCD_DB7, 0);
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	67 e0       	ldi	r22, 0x07	; 7
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB6, 0);
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	66 e0       	ldi	r22, 0x06	; 6
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB5, 1);
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	65 e0       	ldi	r22, 0x05	; 5
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	DIO_write(HLCD_DATA_PORT, HLCD_DB4, 0);
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	64 e0       	ldi	r22, 0x04	; 4
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Trigger writing over the LCD*/
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 0);
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	63 e0       	ldi	r22, 0x03	; 3
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	25 e8       	ldi	r18, 0x85	; 133
     738:	2a 95       	dec	r18
     73a:	f1 f7       	brne	.-4      	; 0x738 <hlcd_init+0x78>
     73c:	00 00       	nop
	_delay_us(50);
	DIO_write(HLCD_CONTROL_PORT, HLCD_EN, 1);
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	63 e0       	ldi	r22, 0x03	; 3
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	
	/*Sending the function set instruction*/
	hlcd_sendCMD(0x2C);
     748:	8c e2       	ldi	r24, 0x2C	; 44
     74a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <hlcd_sendCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     74e:	8f ec       	ldi	r24, 0xCF	; 207
     750:	97 e0       	ldi	r25, 0x07	; 7
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <hlcd_init+0x92>
     756:	00 c0       	rjmp	.+0      	; 0x758 <hlcd_init+0x98>
     758:	00 00       	nop
	
	/*Delay for 1 millisecond*/
	_delay_ms(1);

	/*Sending the display ON/OFF control instruction*/
	hlcd_sendCMD(0x0F);
     75a:	8f e0       	ldi	r24, 0x0F	; 15
     75c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <hlcd_sendCMD>
     760:	8f ec       	ldi	r24, 0xCF	; 207
     762:	97 e0       	ldi	r25, 0x07	; 7
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <hlcd_init+0xa4>
     768:	00 c0       	rjmp	.+0      	; 0x76a <hlcd_init+0xaa>
     76a:	00 00       	nop
	
	/*Delay for 1 millisecond*/
	_delay_ms(1);
	
	/*Sending the clearing display instruction*/
	hlcd_sendCMD(0x01);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <hlcd_sendCMD>
     772:	8f e9       	ldi	r24, 0x9F	; 159
     774:	9f e0       	ldi	r25, 0x0F	; 15
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <hlcd_init+0xb6>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <hlcd_init+0xbc>
     77c:	00 00       	nop
	
	/*Delay for 2 millisecond*/
	_delay_ms(2);
	
	/*Sending the entry mode set instruction*/
	hlcd_sendCMD(0x06);
     77e:	86 e0       	ldi	r24, 0x06	; 6
     780:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <hlcd_sendCMD>
     784:	8f ec       	ldi	r24, 0xCF	; 207
     786:	97 e0       	ldi	r25, 0x07	; 7
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <hlcd_init+0xc8>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <hlcd_init+0xce>
     78e:	00 00       	nop
     790:	08 95       	ret

00000792 <hlcd_writeChar>:
}

void hlcd_writeChar(uint8 au8_charData)
{
	/*Sending the character data over LCD*/
	hlcd_sendData(au8_charData);
     792:	0e 94 ee 02 	call	0x5dc	; 0x5dc <hlcd_sendData>
     796:	08 95       	ret

00000798 <hlcd_writeString>:
	/*Return from this function*/
	return;
}

void hlcd_writeString(char* pu8_stringData)
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
	/*Looping over string characters*/
	while(*pu8_stringData != '\0')
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <hlcd_writeString+0xe>
	{
		/*Sending the character data*/
		hlcd_sendData(*pu8_stringData);
     7a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <hlcd_sendData>
		
		/*Increment the pointer current address*/
		pu8_stringData++;
     7a4:	21 96       	adiw	r28, 0x01	; 1
}

void hlcd_writeString(char* pu8_stringData)
{
	/*Looping over string characters*/
	while(*pu8_stringData != '\0')
     7a6:	88 81       	ld	r24, Y
     7a8:	81 11       	cpse	r24, r1
     7aa:	fa cf       	rjmp	.-12     	; 0x7a0 <hlcd_writeString+0x8>
		pu8_stringData++;
	}
	
	/*Return from this function*/
	return;
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <hlcd_clearLCD>:

void hlcd_clearLCD(void)
{
	/*Sending the clearing display instruction*/
	hlcd_sendCMD(0x01);
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <hlcd_sendCMD>
     7b8:	8f e9       	ldi	r24, 0x9F	; 159
     7ba:	9f e0       	ldi	r25, 0x0F	; 15
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <hlcd_clearLCD+0xa>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <hlcd_clearLCD+0x10>
     7c2:	00 00       	nop
     7c4:	08 95       	ret

000007c6 <hlcd_goToRowCol>:


void hlcd_goToRowCol(uint8 au8_row,uint8 au8_col)
{
	    
		hlcd_sendCMD(au8_row | au8_col);
     7c6:	86 2b       	or	r24, r22
     7c8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <hlcd_sendCMD>
     7cc:	08 95       	ret

000007ce <keypad_vInit>:
#include "keypad_driver.h"
void keypad_vInit(void)
{
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	84 e4       	ldi	r24, 0x44	; 68
     7d4:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	84 e4       	ldi	r24, 0x44	; 68
     7de:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	62 e0       	ldi	r22, 0x02	; 2
     7e6:	84 e4       	ldi	r24, 0x44	; 68
     7e8:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	63 e0       	ldi	r22, 0x03	; 3
     7f0:	84 e4       	ldi	r24, 0x44	; 68
     7f2:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	64 e0       	ldi	r22, 0x04	; 4
     7fa:	84 e4       	ldi	r24, 0x44	; 68
     7fc:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	65 e0       	ldi	r22, 0x05	; 5
     804:	84 e4       	ldi	r24, 0x44	; 68
     806:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	66 e0       	ldi	r22, 0x06	; 6
     80e:	84 e4       	ldi	r24, 0x44	; 68
     810:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	67 e0       	ldi	r22, 0x07	; 7
     818:	84 e4       	ldi	r24, 0x44	; 68
     81a:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	84 e4       	ldi	r24, 0x44	; 68
     824:	0e 94 90 01 	call	0x320	; 0x320 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	65 e0       	ldi	r22, 0x05	; 5
     82c:	84 e4       	ldi	r24, 0x44	; 68
     82e:	0e 94 90 01 	call	0x320	; 0x320 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	66 e0       	ldi	r22, 0x06	; 6
     836:	84 e4       	ldi	r24, 0x44	; 68
     838:	0e 94 90 01 	call	0x320	; 0x320 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	67 e0       	ldi	r22, 0x07	; 7
     840:	84 e4       	ldi	r24, 0x44	; 68
     842:	0e 94 90 01 	call	0x320	; 0x320 <DIO_vconnectpullup>
     846:	08 95       	ret

00000848 <keypad_u8check_press>:
	/****************************************************/
}
uint8 keypad_u8check_press(void)
{
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	60 97       	sbiw	r28, 0x10	; 16
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
     862:	80 e1       	ldi	r24, 0x10	; 16
     864:	e0 e6       	ldi	r30, 0x60	; 96
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	de 01       	movw	r26, r28
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	01 90       	ld	r0, Z+
     86e:	0d 92       	st	X+, r0
     870:	8a 95       	dec	r24
     872:	e1 f7       	brne	.-8      	; 0x86c <__stack+0xd>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
     874:	ff 24       	eor	r15, r15
     876:	fa 94       	dec	r15
	for(row=0;row<4;row++)
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	3c c0       	rjmp	.+120    	; 0x8f4 <__stack+0x95>
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	84 e4       	ldi	r24, 0x44	; 68
     882:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	84 e4       	ldi	r24, 0x44	; 68
     88c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	62 e0       	ldi	r22, 0x02	; 2
     894:	84 e4       	ldi	r24, 0x44	; 68
     896:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	63 e0       	ldi	r22, 0x03	; 3
     89e:	84 e4       	ldi	r24, 0x44	; 68
     8a0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     8a4:	8f e3       	ldi	r24, 0x3F	; 63
     8a6:	9c e9       	ldi	r25, 0x9C	; 156
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <__stack+0x49>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
     8ae:	00 00       	nop
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	60 2f       	mov	r22, r16
     8b4:	84 e4       	ldi	r24, 0x44	; 68
     8b6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	18 c0       	rjmp	.+48     	; 0x8ee <__stack+0x8f>
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
     8be:	64 e0       	ldi	r22, 0x04	; 4
     8c0:	61 0f       	add	r22, r17
     8c2:	84 e4       	ldi	r24, 0x44	; 68
     8c4:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
     8c8:	81 11       	cpse	r24, r1
     8ca:	10 c0       	rjmp	.+32     	; 0x8ec <__stack+0x8d>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
     8cc:	e0 2f       	mov	r30, r16
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	8c 0f       	add	r24, r28
     8de:	9d 1f       	adc	r25, r29
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	e1 0f       	add	r30, r17
     8e6:	f1 1d       	adc	r31, r1
     8e8:	f0 80       	ld	r15, Z
				break; // break from the loop
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <__stack+0x93>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
     8ec:	1f 5f       	subi	r17, 0xFF	; 255
     8ee:	14 30       	cpi	r17, 0x04	; 4
     8f0:	30 f3       	brcs	.-52     	; 0x8be <__stack+0x5f>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
     8f2:	0f 5f       	subi	r16, 0xFF	; 255
     8f4:	04 30       	cpi	r16, 0x04	; 4
     8f6:	10 f2       	brcs	.-124    	; 0x87c <__stack+0x1d>
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
     8f8:	8f 2d       	mov	r24, r15
     8fa:	60 96       	adiw	r28, 0x10	; 16
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	08 95       	ret

00000912 <LED_vInit>:
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     912:	41 e0       	ldi	r20, 0x01	; 1
     914:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
     918:	08 95       	ret

0000091a <LED_vTurnOn>:
}
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     920:	08 95       	ret

00000922 <LED_vTurnOff>:
}
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     928:	08 95       	ret

0000092a <main>:

volatile uint16 session_counter = 0;//indicate session time
uint8 timeout_flag = FALSE;//stores if the session is still valid or outdated

int main(void)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	28 97       	sbiw	r28, 0x08	; 8
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
	uint8 key_pressed = NOT_PRESSED;//
	/*****************  INITIALIZE  ***********************/
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN);//initializes the led of admin
     93e:	67 e0       	ldi	r22, 0x07	; 7
     940:	83 e4       	ldi	r24, 0x43	; 67
     942:	0e 94 89 04 	call	0x912	; 0x912 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN);//initializes the led of guest
     946:	64 e0       	ldi	r22, 0x04	; 4
     948:	84 e4       	ldi	r24, 0x44	; 68
     94a:	0e 94 89 04 	call	0x912	; 0x912 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN);//initializes the led of block
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	83 e4       	ldi	r24, 0x43	; 67
     952:	0e 94 89 04 	call	0x912	; 0x912 <LED_vInit>
	hlcd_init();//initializes the LCD screen
     956:	0e 94 60 03 	call	0x6c0	; 0x6c0 <hlcd_init>
	keypad_vInit();//initializes the keypad
     95a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keypad_vInit>
	SPI_vInitMaster();//initializes the communication protocol of SPI
     95e:	0e 94 89 0a 	call	0x1512	; 0x1512 <SPI_vInitMaster>
	/******************************************************/
	/* Printing Welcome screen */
	hlcd_writeString((uint8 *)"Welcome to smart");
     962:	80 e7       	ldi	r24, 0x70	; 112
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
	hlcd_goToRowCol(2,1);
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
	hlcd_writeString((uint8 *)"home system");
     972:	81 e8       	ldi	r24, 0x81	; 129
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	39 e6       	ldi	r19, 0x69	; 105
     97e:	88 e1       	ldi	r24, 0x18	; 24
     980:	21 50       	subi	r18, 0x01	; 1
     982:	30 40       	sbci	r19, 0x00	; 0
     984:	80 40       	sbci	r24, 0x00	; 0
     986:	e1 f7       	brne	.-8      	; 0x980 <main+0x56>
     988:	00 c0       	rjmp	.+0      	; 0x98a <main+0x60>
     98a:	00 00       	nop
	_delay_ms(1000);//Halt the system for the given time in (ms)
	hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     98c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 21 02 	call	0x442	; 0x442 <EEPROM_ui8ReadByteFromAddress>
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	39 f4       	brne	.+14     	; 0x9aa <main+0x80>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 21 02 	call	0x442	; 0x442 <EEPROM_ui8ReadByteFromAddress>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <main+0x80>
     9a8:	d5 c0       	rjmp	.+426    	; 0xb54 <main+0x22a>
	{
		hlcd_writeString((uint8 *)"Login for");//printing login menu
     9aa:	8d e8       	ldi	r24, 0x8D	; 141
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		hlcd_goToRowCol(2,1);//move the cursor to the second line
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
		hlcd_writeString((uint8 *)"first time");
     9ba:	87 e9       	ldi	r24, 0x97	; 151
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     9c2:	9f ef       	ldi	r25, 0xFF	; 255
     9c4:	29 e6       	ldi	r18, 0x69	; 105
     9c6:	38 e1       	ldi	r19, 0x18	; 24
     9c8:	91 50       	subi	r25, 0x01	; 1
     9ca:	20 40       	sbci	r18, 0x00	; 0
     9cc:	30 40       	sbci	r19, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <main+0x9e>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <main+0xa8>
     9d2:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
		hlcd_writeString((uint8 *)"Set Admin pass");//printing the set admin password menu
     9d8:	82 ea       	ldi	r24, 0xA2	; 162
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		hlcd_goToRowCol(2,1);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
		hlcd_writeString((uint8 *)"Admin pass:");
     9e8:	81 eb       	ldi	r24, 0xB1	; 177
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	8a 83       	std	Y+2, r24	; 0x02
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	8c 83       	std	Y+4, r24	; 0x04
		hlcd_writeString((uint8 *)"Set Admin pass");//printing the set admin password menu
		hlcd_goToRowCol(2,1);
		hlcd_writeString((uint8 *)"Admin pass:");

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
     9fa:	10 e0       	ldi	r17, 0x00	; 0
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     9fc:	2a c0       	rjmp	.+84     	; 0xa52 <main+0x128>
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     9fe:	0e 94 24 04 	call	0x848	; 0x848 <keypad_u8check_press>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <main+0xdc>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     a06:	8f 3f       	cpi	r24, 0xFF	; 255
     a08:	d1 f3       	breq	.-12     	; 0x9fe <main+0xd4>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     a0a:	e1 e0       	ldi	r30, 0x01	; 1
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	ec 0f       	add	r30, r28
     a10:	fd 1f       	adc	r31, r29
     a12:	e1 0f       	add	r30, r17
     a14:	f1 1d       	adc	r31, r1
     a16:	80 83       	st	Z, r24
			hlcd_writeChar(key_pressed);//print the entered character
     a18:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	92 e5       	ldi	r25, 0x52	; 82
     a20:	27 e0       	ldi	r18, 0x07	; 7
     a22:	81 50       	subi	r24, 0x01	; 1
     a24:	90 40       	sbci	r25, 0x00	; 0
     a26:	20 40       	sbci	r18, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <main+0xf8>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <main+0x102>
     a2c:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			hlcd_goToRowCol(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     a2e:	6c e0       	ldi	r22, 0x0C	; 12
     a30:	61 0f       	add	r22, r17
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
			hlcd_writeChar(PASSWORD_SYMBOL); // to display (Password sign *)
     a38:	8a e2       	ldi	r24, 0x2A	; 42
     a3a:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	80 e7       	ldi	r24, 0x70	; 112
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	31 50       	subi	r19, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <main+0x11a>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <main+0x124>
     a4e:	00 00       	nop
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
     a50:	1f 5f       	subi	r17, 0xFF	; 255
		hlcd_writeString((uint8 *)"Admin pass:");

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     a52:	14 30       	cpi	r17, 0x04	; 4
     a54:	b8 f2       	brcs	.-82     	; 0xa04 <main+0xda>
			hlcd_goToRowCol(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			hlcd_writeChar(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     a56:	44 e0       	ldi	r20, 0x04	; 4
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	be 01       	movw	r22, r28
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 55 02 	call	0x4aa	; 0x4aa <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 43 02 	call	0x486	; 0x486 <EEPROM_vWriteByteToAddress>
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a72:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
		hlcd_writeString("Pass Saved");// show pass saved message
     a76:	8d eb       	ldi	r24, 0xBD	; 189
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     a7e:	2f ef       	ldi	r18, 0xFF	; 255
     a80:	34 e3       	ldi	r19, 0x34	; 52
     a82:	8c e0       	ldi	r24, 0x0C	; 12
     a84:	21 50       	subi	r18, 0x01	; 1
     a86:	30 40       	sbci	r19, 0x00	; 0
     a88:	80 40       	sbci	r24, 0x00	; 0
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <main+0x15a>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <main+0x164>
     a8e:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a90:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		hlcd_writeString((uint8 *)"Set Guest Pass");//printing the set admin password menu
     a94:	88 ec       	ldi	r24, 0xC8	; 200
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		hlcd_goToRowCol(2,1);
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
		hlcd_writeString((uint8 *)"Guest Pass:");
     aa4:	87 ed       	ldi	r24, 0xD7	; 215
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		hlcd_writeString("Pass Saved");// show pass saved message
		_delay_ms(500);//Halt the system for the given time in (ms)
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
     aac:	10 e0       	ldi	r17, 0x00	; 0
		hlcd_writeString((uint8 *)"Set Guest Pass");//printing the set admin password menu
		hlcd_goToRowCol(2,1);
		hlcd_writeString((uint8 *)"Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     aae:	2a c0       	rjmp	.+84     	; 0xb04 <main+0x1da>
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     ab0:	0e 94 24 04 	call	0x848	; 0x848 <keypad_u8check_press>
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <main+0x18e>
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
		hlcd_goToRowCol(2,1);
		hlcd_writeString((uint8 *)"Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     ab8:	8f 3f       	cpi	r24, 0xFF	; 255
     aba:	d1 f3       	breq	.-12     	; 0xab0 <main+0x186>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     abc:	e1 e0       	ldi	r30, 0x01	; 1
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	ec 0f       	add	r30, r28
     ac2:	fd 1f       	adc	r31, r29
     ac4:	e1 0f       	add	r30, r17
     ac6:	f1 1d       	adc	r31, r1
     ac8:	80 83       	st	Z, r24
			hlcd_writeChar(key_pressed);//print the entered character
     aca:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     ace:	9f ef       	ldi	r25, 0xFF	; 255
     ad0:	22 e5       	ldi	r18, 0x52	; 82
     ad2:	37 e0       	ldi	r19, 0x07	; 7
     ad4:	91 50       	subi	r25, 0x01	; 1
     ad6:	20 40       	sbci	r18, 0x00	; 0
     ad8:	30 40       	sbci	r19, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <main+0x1aa>
     adc:	00 c0       	rjmp	.+0      	; 0xade <main+0x1b4>
     ade:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			hlcd_goToRowCol(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     ae0:	6c e0       	ldi	r22, 0x0C	; 12
     ae2:	61 0f       	add	r22, r17
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
			hlcd_writeChar(PASSWORD_SYMBOL); // to display (Password sign *)
     aea:	8a e2       	ldi	r24, 0x2A	; 42
     aec:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	90 e7       	ldi	r25, 0x70	; 112
     af4:	22 e0       	ldi	r18, 0x02	; 2
     af6:	81 50       	subi	r24, 0x01	; 1
     af8:	90 40       	sbci	r25, 0x00	; 0
     afa:	20 40       	sbci	r18, 0x00	; 0
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <main+0x1cc>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <main+0x1d6>
     b00:	00 00       	nop
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
     b02:	1f 5f       	subi	r17, 0xFF	; 255
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		hlcd_writeString((uint8 *)"Set Guest Pass");//printing the set admin password menu
		hlcd_goToRowCol(2,1);
		hlcd_writeString((uint8 *)"Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     b04:	14 30       	cpi	r17, 0x04	; 4
     b06:	b8 f2       	brcs	.-82     	; 0xab6 <main+0x18c>
			hlcd_goToRowCol(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			hlcd_writeChar(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     b08:	44 e0       	ldi	r20, 0x04	; 4
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	be 01       	movw	r22, r28
     b0e:	6f 5f       	subi	r22, 0xFF	; 255
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	86 e0       	ldi	r24, 0x06	; 6
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 55 02 	call	0x4aa	; 0x4aa <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 43 02 	call	0x486	; 0x486 <EEPROM_vWriteByteToAddress>
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b24:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
		hlcd_writeString((uint8 *)"Pass Saved");//move the lcd cursor to the previous location
     b28:	8d eb       	ldi	r24, 0xBD	; 189
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     b30:	3f ef       	ldi	r19, 0xFF	; 255
     b32:	84 e3       	ldi	r24, 0x34	; 52
     b34:	9c e0       	ldi	r25, 0x0C	; 12
     b36:	31 50       	subi	r19, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <main+0x20c>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <main+0x216>
     b40:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b42:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	8a e0       	ldi	r24, 0x0A	; 10
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 43 02 	call	0x486	; 0x486 <EEPROM_vWriteByteToAddress>
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     b50:	f1 2c       	mov	r15, r1
	hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
	{
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <main+0x234>
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
     b54:	8a e0       	ldi	r24, 0x0A	; 10
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 21 02 	call	0x442	; 0x442 <EEPROM_ui8ReadByteFromAddress>
     b5c:	f8 2e       	mov	r15, r24
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     b5e:	00 e0       	ldi	r16, 0x00	; 0
	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		
		if ( timeout_flag==TRUE )//check for timeout
     b60:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	01 f5       	brne	.+64     	; 0xba8 <main+0x27e>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
     b68:	0e 94 ab 0a 	call	0x1556	; 0x1556 <timer0_stop>
			session_counter = 0;//clear session counter
     b6c:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <session_counter+0x1>
     b70:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <session_counter>
			timeout_flag=FALSE;//clear time out flag
     b74:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <__data_end>
			login_mode=NO_MODE;//log the user out
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
     b78:	64 e0       	ldi	r22, 0x04	; 4
     b7a:	84 e4       	ldi	r24, 0x44	; 68
     b7c:	0e 94 91 04 	call	0x922	; 0x922 <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
     b80:	67 e0       	ldi	r22, 0x07	; 7
     b82:	83 e4       	ldi	r24, 0x43	; 67
     b84:	0e 94 91 04 	call	0x922	; 0x922 <LED_vTurnOff>
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b88:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
			hlcd_writeString("Session Timeout");//print session timeout message
     b8c:	83 ee       	ldi	r24, 0xE3	; 227
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	39 e6       	ldi	r19, 0x69	; 105
     b98:	88 e1       	ldi	r24, 0x18	; 24
     b9a:	21 50       	subi	r18, 0x01	; 1
     b9c:	30 40       	sbci	r19, 0x00	; 0
     b9e:	80 40       	sbci	r24, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <main+0x270>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <main+0x27a>
     ba4:	00 00       	nop
		if ( timeout_flag==TRUE )//check for timeout
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
			session_counter = 0;//clear session counter
			timeout_flag=FALSE;//clear time out flag
			login_mode=NO_MODE;//log the user out
     ba6:	00 e0       	ldi	r16, 0x00	; 0
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
			{
				hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
				hlcd_writeString((uint8 *)"Wrong input.");//Prints error message on the LCD
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     ba8:	e1 2c       	mov	r14, r1
     baa:	1f ef       	ldi	r17, 0xFF	; 255
     bac:	bc c1       	rjmp	.+888    	; 0xf26 <main+0x5fc>
			hlcd_writeString("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	f9 12       	cpse	r15, r25
     bb2:	27 c0       	rjmp	.+78     	; 0xc02 <main+0x2d8>
			{
				hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bb4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
				hlcd_writeString((uint8 *)"Login blocked");
     bb8:	83 ef       	ldi	r24, 0xF3	; 243
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
				hlcd_goToRowCol(2,1);
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
				hlcd_writeString((uint8 *)"wait 20 seconds");
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
     bd0:	62 e0       	ldi	r22, 0x02	; 2
     bd2:	83 e4       	ldi	r24, 0x43	; 67
     bd4:	0e 94 8d 04 	call	0x91a	; 0x91a <LED_vTurnOn>
     bd8:	2a ea       	ldi	r18, 0xAA	; 170
     bda:	36 ee       	ldi	r19, 0xE6	; 230
     bdc:	86 e9       	ldi	r24, 0x96	; 150
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	30 40       	sbci	r19, 0x00	; 0
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	d9 f7       	brne	.-10     	; 0xbe0 <main+0x2b6>
     bea:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
     bec:	62 e0       	ldi	r22, 0x02	; 2
     bee:	83 e4       	ldi	r24, 0x43	; 67
     bf0:	0e 94 91 04 	call	0x922	; 0x922 <LED_vTurnOff>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	8a e0       	ldi	r24, 0x0A	; 10
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	0e 94 43 02 	call	0x486	; 0x486 <EEPROM_vWriteByteToAddress>
				hlcd_writeString((uint8 *)"Login blocked");
				hlcd_goToRowCol(2,1);
				hlcd_writeString((uint8 *)"wait 20 seconds");
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
     bfe:	e1 2c       	mov	r14, r1
				block_mode_flag = FALSE;//Disable block of runtime
     c00:	f1 2c       	mov	r15, r1
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c02:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
			hlcd_writeString((uint8 *)"Select mode :");
     c06:	81 e1       	ldi	r24, 0x11	; 17
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			hlcd_goToRowCol(2,1);
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
			hlcd_writeString((uint8 *)"0:Admin 1:Guest");
     c16:	8f e1       	ldi	r24, 0x1F	; 31
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <main+0x2fc>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     c20:	0e 94 24 04 	call	0x848	; 0x848 <keypad_u8check_press>
     c24:	18 2f       	mov	r17, r24
			}
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			hlcd_writeString((uint8 *)"Select mode :");
			hlcd_goToRowCol(2,1);
			hlcd_writeString((uint8 *)"0:Admin 1:Guest");
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     c26:	1f 3f       	cpi	r17, 0xFF	; 255
     c28:	d9 f3       	breq	.-10     	; 0xc20 <main+0x2f6>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     c2a:	80 ed       	ldi	r24, 0xD0	; 208
     c2c:	81 0f       	add	r24, r17
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	88 f0       	brcs	.+34     	; 0xc54 <main+0x32a>
			{
				hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c32:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
				hlcd_writeString((uint8 *)"Wrong input.");//Prints error message on the LCD
     c36:	8f e2       	ldi	r24, 0x2F	; 47
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	39 e6       	ldi	r19, 0x69	; 105
     c42:	88 e1       	ldi	r24, 0x18	; 24
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	30 40       	sbci	r19, 0x00	; 0
     c48:	80 40       	sbci	r24, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <main+0x31a>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <main+0x324>
     c4e:	00 00       	nop
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     c50:	1f ef       	ldi	r17, 0xFF	; 255
     c52:	69 c1       	rjmp	.+722    	; 0xf26 <main+0x5fc>
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	8e 83       	std	Y+6, r24	; 0x06
     c5a:	8f 83       	std	Y+7, r24	; 0x07
     c5c:	88 87       	std	Y+8, r24	; 0x08
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	8a 83       	std	Y+2, r24	; 0x02
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	8c 83       	std	Y+4, r24	; 0x04
			
			switch(key_pressed)
     c66:	10 33       	cpi	r17, 0x30	; 48
     c68:	09 f4       	brne	.+2      	; 0xc6c <main+0x342>
     c6a:	ab c0       	rjmp	.+342    	; 0xdc2 <main+0x498>
     c6c:	11 33       	cpi	r17, 0x31	; 49
     c6e:	09 f4       	brne	.+2      	; 0xc72 <main+0x348>
     c70:	55 c1       	rjmp	.+682    	; 0xf1c <main+0x5f2>
     c72:	59 c1       	rjmp	.+690    	; 0xf26 <main+0x5fc>
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c74:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"Admin mode");
     c78:	8c e3       	ldi	r24, 0x3C	; 60
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					hlcd_goToRowCol(2,1);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
					hlcd_writeString((uint8 *)"Enter Pass:");
     c88:	87 e4       	ldi	r24, 0x47	; 71
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     c90:	9f ef       	ldi	r25, 0xFF	; 255
     c92:	21 ee       	ldi	r18, 0xE1	; 225
     c94:	34 e0       	ldi	r19, 0x04	; 4
     c96:	91 50       	subi	r25, 0x01	; 1
     c98:	20 40       	sbci	r18, 0x00	; 0
     c9a:	30 40       	sbci	r19, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <main+0x36c>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <main+0x376>
     ca0:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
     ca2:	10 e0       	ldi	r17, 0x00	; 0
					while(pass_counter<PASS_SIZE)
     ca4:	2a c0       	rjmp	.+84     	; 0xcfa <main+0x3d0>
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     ca6:	0e 94 24 04 	call	0x848	; 0x848 <keypad_u8check_press>
     caa:	01 c0       	rjmp	.+2      	; 0xcae <main+0x384>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
					hlcd_writeString((uint8 *)"Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     cae:	8f 3f       	cpi	r24, 0xFF	; 255
     cb0:	d1 f3       	breq	.-12     	; 0xca6 <main+0x37c>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the entered character to the pass array
     cb2:	e5 e0       	ldi	r30, 0x05	; 5
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ec 0f       	add	r30, r28
     cb8:	fd 1f       	adc	r31, r29
     cba:	e1 0f       	add	r30, r17
     cbc:	f1 1d       	adc	r31, r1
     cbe:	80 83       	st	Z, r24
						hlcd_writeChar(key_pressed);//print the entered character
     cc0:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	92 e5       	ldi	r25, 0x52	; 82
     cc8:	27 e0       	ldi	r18, 0x07	; 7
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	90 40       	sbci	r25, 0x00	; 0
     cce:	20 40       	sbci	r18, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <main+0x3a0>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <main+0x3aa>
     cd4:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						hlcd_goToRowCol(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
     cd6:	6c e0       	ldi	r22, 0x0C	; 12
     cd8:	61 0f       	add	r22, r17
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
						hlcd_writeChar(PASSWORD_SYMBOL);// to display (Password sign *)
     ce0:	8a e2       	ldi	r24, 0x2A	; 42
     ce2:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     ce6:	3f ef       	ldi	r19, 0xFF	; 255
     ce8:	80 e7       	ldi	r24, 0x70	; 112
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	31 50       	subi	r19, 0x01	; 1
     cee:	80 40       	sbci	r24, 0x00	; 0
     cf0:	90 40       	sbci	r25, 0x00	; 0
     cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0x3c2>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <main+0x3cc>
     cf6:	00 00       	nop
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
     cf8:	1f 5f       	subi	r17, 0xFF	; 255
					hlcd_writeString((uint8 *)"Admin mode");
					hlcd_goToRowCol(2,1);
					hlcd_writeString((uint8 *)"Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     cfa:	14 30       	cpi	r17, 0x04	; 4
     cfc:	b8 f2       	brcs	.-82     	; 0xcac <main+0x382>
						hlcd_writeChar(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
     cfe:	44 e0       	ldi	r20, 0x04	; 4
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	be 01       	movw	r22, r28
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 2a 02 	call	0x454	; 0x454 <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     d10:	44 e0       	ldi	r20, 0x04	; 4
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	ce 01       	movw	r24, r28
     d1a:	05 96       	adiw	r24, 0x05	; 5
     d1c:	0e 94 9a 09 	call	0x1334	; 0x1334 <ui8ComparePass>
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	11 f5       	brne	.+68     	; 0xd68 <main+0x43e>
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d24:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Right pass");
     d28:	83 e5       	ldi	r24, 0x53	; 83
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
						hlcd_goToRowCol(2,1);
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
						hlcd_writeString("Admin mode");
     d38:	8c e3       	ldi	r24, 0x3C	; 60
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     d40:	2f ef       	ldi	r18, 0xFF	; 255
     d42:	34 e3       	ldi	r19, 0x34	; 52
     d44:	8c e0       	ldi	r24, 0x0C	; 12
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	30 40       	sbci	r19, 0x00	; 0
     d4a:	80 40       	sbci	r24, 0x00	; 0
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <main+0x41c>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <main+0x426>
     d50:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
     d52:	67 e0       	ldi	r22, 0x07	; 7
     d54:	83 e4       	ldi	r24, 0x43	; 67
     d56:	0e 94 8d 04 	call	0x91a	; 0x91a <LED_vTurnOn>
						timer0_initializeCTC();//start the timer that counts the session time
     d5a:	0e 94 95 0a 	call	0x152a	; 0x152a <timer0_initializeCTC>
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d5e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
     d62:	e1 2c       	mov	r14, r1
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						login_mode = ADMIN;//set the login mode to admin mode
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	2b c0       	rjmp	.+86     	; 0xdbe <main+0x494>
						timer0_initializeCTC();//start the timer that counts the session time
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     d68:	e3 94       	inc	r14
						login_mode = NO_MODE;//set the mode as not logged in
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d6a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong Pass");
     d6e:	8e e5       	ldi	r24, 0x5E	; 94
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
						hlcd_goToRowCol(2,1);
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
						hlcd_writeString((uint8 *)"Tries left:");
     d7e:	89 e6       	ldi	r24, 0x69	; 105
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
						hlcd_writeChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     d86:	83 e3       	ldi	r24, 0x33	; 51
     d88:	8e 19       	sub	r24, r14
     d8a:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	29 e6       	ldi	r18, 0x69	; 105
     d92:	38 e1       	ldi	r19, 0x18	; 24
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	20 40       	sbci	r18, 0x00	; 0
     d98:	30 40       	sbci	r19, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <main+0x46a>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <main+0x474>
     d9e:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     da0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	8e 15       	cp	r24, r14
     da8:	48 f4       	brcc	.+18     	; 0xdbc <main+0x492>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 43 02 	call	0x486	; 0x486 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     db4:	1f ef       	ldi	r17, 0xFF	; 255
						_delay_ms(1000);//Halt the system for the given time in (ms)
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     db6:	ff 24       	eor	r15, r15
     db8:	f3 94       	inc	r15
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     dba:	b5 c0       	rjmp	.+362    	; 0xf26 <main+0x5fc>
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     dbc:	80 2f       	mov	r24, r16
     dbe:	1f ef       	ldi	r17, 0xFF	; 255
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <main+0x49a>

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
			
			switch(key_pressed)
     dc2:	80 2f       	mov	r24, r16
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <main+0x4a0>
     dc8:	55 cf       	rjmp	.-342    	; 0xc74 <main+0x34a>
     dca:	08 2f       	mov	r16, r24
     dcc:	ac c0       	rjmp	.+344    	; 0xf26 <main+0x5fc>
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     dce:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"Guest mode");
     dd2:	85 e7       	ldi	r24, 0x75	; 117
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					hlcd_goToRowCol(2,1);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
					hlcd_writeString((uint8 *)"Enter pass:");
     de2:	80 e8       	ldi	r24, 0x80	; 128
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     dea:	9f ef       	ldi	r25, 0xFF	; 255
     dec:	21 ee       	ldi	r18, 0xE1	; 225
     dee:	34 e0       	ldi	r19, 0x04	; 4
     df0:	91 50       	subi	r25, 0x01	; 1
     df2:	20 40       	sbci	r18, 0x00	; 0
     df4:	30 40       	sbci	r19, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <main+0x4c6>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <main+0x4d0>
     dfa:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
     dfc:	10 e0       	ldi	r17, 0x00	; 0
					while(pass_counter<PASS_SIZE)
     dfe:	2a c0       	rjmp	.+84     	; 0xe54 <main+0x52a>
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     e00:	0e 94 24 04 	call	0x848	; 0x848 <keypad_u8check_press>
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <main+0x4de>
     e06:	8f ef       	ldi	r24, 0xFF	; 255
					hlcd_writeString((uint8 *)"Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     e08:	8f 3f       	cpi	r24, 0xFF	; 255
     e0a:	d1 f3       	breq	.-12     	; 0xe00 <main+0x4d6>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
     e0c:	e5 e0       	ldi	r30, 0x05	; 5
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	ec 0f       	add	r30, r28
     e12:	fd 1f       	adc	r31, r29
     e14:	e1 0f       	add	r30, r17
     e16:	f1 1d       	adc	r31, r1
     e18:	80 83       	st	Z, r24
						hlcd_writeChar(key_pressed);//print the entered character
     e1a:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	92 e5       	ldi	r25, 0x52	; 82
     e22:	27 e0       	ldi	r18, 0x07	; 7
     e24:	81 50       	subi	r24, 0x01	; 1
     e26:	90 40       	sbci	r25, 0x00	; 0
     e28:	20 40       	sbci	r18, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <main+0x4fa>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <main+0x504>
     e2e:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						hlcd_goToRowCol(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
     e30:	6c e0       	ldi	r22, 0x0C	; 12
     e32:	61 0f       	add	r22, r17
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
						hlcd_writeChar(PASSWORD_SYMBOL); // to display (Password sign *)
     e3a:	8a e2       	ldi	r24, 0x2A	; 42
     e3c:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	80 e7       	ldi	r24, 0x70	; 112
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	31 50       	subi	r19, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <main+0x51c>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <main+0x526>
     e50:	00 00       	nop
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
     e52:	1f 5f       	subi	r17, 0xFF	; 255
					hlcd_writeString((uint8 *)"Guest mode");
					hlcd_goToRowCol(2,1);
					hlcd_writeString((uint8 *)"Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     e54:	14 30       	cpi	r17, 0x04	; 4
     e56:	b8 f2       	brcs	.-82     	; 0xe06 <main+0x4dc>
						hlcd_writeChar(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     e58:	44 e0       	ldi	r20, 0x04	; 4
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	86 e0       	ldi	r24, 0x06	; 6
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 2a 02 	call	0x454	; 0x454 <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     e6a:	44 e0       	ldi	r20, 0x04	; 4
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	ce 01       	movw	r24, r28
     e74:	05 96       	adiw	r24, 0x05	; 5
     e76:	0e 94 9a 09 	call	0x1334	; 0x1334 <ui8ComparePass>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	11 f5       	brne	.+68     	; 0xec2 <main+0x598>
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     e7e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Right pass");
     e82:	83 e5       	ldi	r24, 0x53	; 83
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
						hlcd_goToRowCol(2,1);
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
						hlcd_writeString((uint8 *)"Guest mode");
     e92:	85 e7       	ldi	r24, 0x75	; 117
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     e9a:	2f ef       	ldi	r18, 0xFF	; 255
     e9c:	34 e3       	ldi	r19, 0x34	; 52
     e9e:	8c e0       	ldi	r24, 0x0C	; 12
     ea0:	21 50       	subi	r18, 0x01	; 1
     ea2:	30 40       	sbci	r19, 0x00	; 0
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <main+0x576>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <main+0x580>
     eaa:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
     eac:	64 e0       	ldi	r22, 0x04	; 4
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	0e 94 8d 04 	call	0x91a	; 0x91a <LED_vTurnOn>
						timer0_initializeCTC();//start the counter of the session
     eb4:	0e 94 95 0a 	call	0x152a	; 0x152a <timer0_initializeCTC>
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     eb8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
     ebc:	e1 2c       	mov	r14, r1
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	2b c0       	rjmp	.+86     	; 0xf18 <main+0x5ee>
						timer0_initializeCTC();//start the counter of the session
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     ec2:	e3 94       	inc	r14
						login_mode = NO_MODE;//set the mode as not logged in
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ec4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong pass");
     ec8:	8c e8       	ldi	r24, 0x8C	; 140
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
						hlcd_goToRowCol(2,1);
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
						hlcd_writeString("Tries left:");
     ed8:	89 e6       	ldi	r24, 0x69	; 105
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
						hlcd_writeChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     ee0:	83 e3       	ldi	r24, 0x33	; 51
     ee2:	8e 19       	sub	r24, r14
     ee4:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	29 e6       	ldi	r18, 0x69	; 105
     eec:	38 e1       	ldi	r19, 0x18	; 24
     eee:	91 50       	subi	r25, 0x01	; 1
     ef0:	20 40       	sbci	r18, 0x00	; 0
     ef2:	30 40       	sbci	r19, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <main+0x5c4>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <main+0x5ce>
     ef8:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     efa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	8e 15       	cp	r24, r14
     f02:	48 f4       	brcc	.+18     	; 0xf16 <main+0x5ec>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 43 02 	call	0x486	; 0x486 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     f0e:	1f ef       	ldi	r17, 0xFF	; 255
						_delay_ms(1000);//Halt the system for the given time in (ms)
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     f10:	ff 24       	eor	r15, r15
     f12:	f3 94       	inc	r15
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <main+0x5fc>
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     f16:	80 2f       	mov	r24, r16
     f18:	1f ef       	ldi	r17, 0xFF	; 255
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <main+0x5f4>

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
			
			switch(key_pressed)
     f1c:	80 2f       	mov	r24, r16
					}
				}
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <main+0x5fa>
     f22:	55 cf       	rjmp	.-342    	; 0xdce <main+0x4a4>
     f24:	08 2f       	mov	r16, r24
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			hlcd_writeString("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     f26:	00 23       	and	r16, r16
     f28:	09 f4       	brne	.+2      	; 0xf2c <main+0x602>
     f2a:	41 ce       	rjmp	.-894    	; 0xbae <main+0x284>
     f2c:	ee 24       	eor	r14, r14
     f2e:	e3 94       	inc	r14
     f30:	e4 c1       	rjmp	.+968    	; 0x12fa <main+0x9d0>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
     f32:	8e 2d       	mov	r24, r14
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	fc 01       	movw	r30, r24
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	ea 30       	cpi	r30, 0x0A	; 10
     f3c:	f1 05       	cpc	r31, r1
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <main+0x618>
     f40:	dc c1       	rjmp	.+952    	; 0x12fa <main+0x9d0>
     f42:	e6 5d       	subi	r30, 0xD6	; 214
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__tablejump2__>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					hlcd_clearLCD();
     f4a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"1:Room1 2:Room2");
     f4e:	87 e9       	ldi	r24, 0x97	; 151
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					hlcd_goToRowCol(2,1);
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
					if(login_mode==ADMIN)//check login mode
     f5e:	01 30       	cpi	r16, 0x01	; 1
     f60:	29 f4       	brne	.+10     	; 0xf6c <main+0x642>
					{
						hlcd_writeString((uint8 *)"3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
     f62:	87 ea       	ldi	r24, 0xA7	; 167
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <main+0x64e>
					}
					else if(login_mode==GUEST)//check login mode
     f6c:	02 30       	cpi	r16, 0x02	; 2
     f6e:	21 f4       	brne	.+8      	; 0xf78 <main+0x64e>
					{
						hlcd_writeString((uint8 *)"3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     f70:	87 eb       	ldi	r24, 0xB7	; 183
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					}
					/*******************************************************/
					
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     f78:	80 2f       	mov	r24, r16
     f7a:	0e 94 b0 09 	call	0x1360	; 0x1360 <u8GetKeyPressed>
     f7e:	18 2f       	mov	r17, r24
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	20 e7       	ldi	r18, 0x70	; 112
     f84:	32 e0       	ldi	r19, 0x02	; 2
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	20 40       	sbci	r18, 0x00	; 0
     f8a:	30 40       	sbci	r19, 0x00	; 0
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <main+0x65c>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <main+0x666>
     f90:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     f92:	81 33       	cpi	r24, 0x31	; 49
     f94:	f1 f0       	breq	.+60     	; 0xfd2 <main+0x6a8>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     f96:	82 33       	cpi	r24, 0x32	; 50
     f98:	09 f1       	breq	.+66     	; 0xfdc <main+0x6b2>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     f9a:	83 33       	cpi	r24, 0x33	; 51
     f9c:	19 f1       	breq	.+70     	; 0xfe4 <main+0x6ba>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
     f9e:	84 33       	cpi	r24, 0x34	; 52
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <main+0x67c>
     fa2:	02 30       	cpi	r16, 0x02	; 2
     fa4:	21 f1       	breq	.+72     	; 0xfee <main+0x6c4>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
     fa6:	14 33       	cpi	r17, 0x34	; 52
     fa8:	11 f4       	brne	.+4      	; 0xfae <main+0x684>
     faa:	01 30       	cpi	r16, 0x01	; 1
     fac:	29 f1       	breq	.+74     	; 0xff8 <main+0x6ce>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     fae:	1f 3f       	cpi	r17, 0xFF	; 255
     fb0:	31 f1       	breq	.+76     	; 0xffe <main+0x6d4>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     fb2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong input");//print error message
     fb6:	87 ec       	ldi	r24, 0xC7	; 199
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	94 e3       	ldi	r25, 0x34	; 52
     fc2:	2c e0       	ldi	r18, 0x0C	; 12
     fc4:	81 50       	subi	r24, 0x01	; 1
     fc6:	90 40       	sbci	r25, 0x00	; 0
     fc8:	20 40       	sbci	r18, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <main+0x69a>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <main+0x6a4>
     fce:	00 00       	nop
     fd0:	16 c0       	rjmp	.+44     	; 0xffe <main+0x6d4>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     fd2:	0f 2e       	mov	r0, r31
     fd4:	f3 e0       	ldi	r31, 0x03	; 3
     fd6:	ef 2e       	mov	r14, r31
     fd8:	f0 2d       	mov	r31, r0
     fda:	11 c0       	rjmp	.+34     	; 0xffe <main+0x6d4>
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     fdc:	68 94       	set
     fde:	ee 24       	eor	r14, r14
     fe0:	e2 f8       	bld	r14, 2
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <main+0x6d4>
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     fe4:	0f 2e       	mov	r0, r31
     fe6:	f5 e0       	ldi	r31, 0x05	; 5
     fe8:	ef 2e       	mov	r14, r31
     fea:	f0 2d       	mov	r31, r0
     fec:	08 c0       	rjmp	.+16     	; 0xffe <main+0x6d4>
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     fee:	0f 2e       	mov	r0, r31
     ff0:	f6 e0       	ldi	r31, 0x06	; 6
     ff2:	ef 2e       	mov	r14, r31
     ff4:	f0 2d       	mov	r31, r0
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <main+0x6d4>
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     ff8:	68 94       	set
     ffa:	ee 24       	eor	r14, r14
     ffc:	e1 f8       	bld	r14, 1
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						hlcd_writeString((uint8 *)"Wrong input");//print error message
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
     ffe:	11 53       	subi	r17, 0x31	; 49
    1000:	14 30       	cpi	r17, 0x04	; 4
    1002:	08 f4       	brcc	.+2      	; 0x1006 <main+0x6dc>
    1004:	7a c1       	rjmp	.+756    	; 0x12fa <main+0x9d0>
    1006:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    100a:	88 23       	and	r24, r24
    100c:	09 f4       	brne	.+2      	; 0x1010 <main+0x6e6>
    100e:	9d cf       	rjmp	.-198    	; 0xf4a <main+0x620>
    1010:	74 c1       	rjmp	.+744    	; 0x12fa <main+0x9d0>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1012:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"1:Room4    2:TV   ");
    1016:	83 ed       	ldi	r24, 0xD3	; 211
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					hlcd_goToRowCol(2,1);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
					hlcd_writeString((uint8 *)"3:Air Cond.4:RET");
    1026:	86 ee       	ldi	r24, 0xE6	; 230
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    102e:	80 2f       	mov	r24, r16
    1030:	0e 94 b0 09 	call	0x1360	; 0x1360 <u8GetKeyPressed>
    1034:	18 2f       	mov	r17, r24
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	80 e7       	ldi	r24, 0x70	; 112
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	31 50       	subi	r19, 0x01	; 1
    103e:	80 40       	sbci	r24, 0x00	; 0
    1040:	90 40       	sbci	r25, 0x00	; 0
    1042:	e1 f7       	brne	.-8      	; 0x103c <main+0x712>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <main+0x71c>
    1046:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
    1048:	11 33       	cpi	r17, 0x31	; 49
    104a:	c1 f0       	breq	.+48     	; 0x107c <main+0x752>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
    104c:	12 33       	cpi	r17, 0x32	; 50
    104e:	d9 f0       	breq	.+54     	; 0x1086 <main+0x75c>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
    1050:	13 33       	cpi	r17, 0x33	; 51
    1052:	f1 f0       	breq	.+60     	; 0x1090 <main+0x766>
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
    1054:	14 33       	cpi	r17, 0x34	; 52
    1056:	01 f1       	breq	.+64     	; 0x1098 <main+0x76e>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    1058:	1f 3f       	cpi	r17, 0xFF	; 255
    105a:	01 f1       	breq	.+64     	; 0x109c <main+0x772>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    105c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong input");//print error message
    1060:	87 ec       	ldi	r24, 0xC7	; 199
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    1068:	2f ef       	ldi	r18, 0xFF	; 255
    106a:	34 e3       	ldi	r19, 0x34	; 52
    106c:	8c e0       	ldi	r24, 0x0C	; 12
    106e:	21 50       	subi	r18, 0x01	; 1
    1070:	30 40       	sbci	r19, 0x00	; 0
    1072:	80 40       	sbci	r24, 0x00	; 0
    1074:	e1 f7       	brne	.-8      	; 0x106e <main+0x744>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <main+0x74e>
    1078:	00 00       	nop
    107a:	10 c0       	rjmp	.+32     	; 0x109c <main+0x772>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    107c:	0f 2e       	mov	r0, r31
    107e:	f6 e0       	ldi	r31, 0x06	; 6
    1080:	ef 2e       	mov	r14, r31
    1082:	f0 2d       	mov	r31, r0
    1084:	0b c0       	rjmp	.+22     	; 0x109c <main+0x772>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
    1086:	0f 2e       	mov	r0, r31
    1088:	f7 e0       	ldi	r31, 0x07	; 7
    108a:	ef 2e       	mov	r14, r31
    108c:	f0 2d       	mov	r31, r0
    108e:	06 c0       	rjmp	.+12     	; 0x109c <main+0x772>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
    1090:	68 94       	set
    1092:	ee 24       	eor	r14, r14
    1094:	e3 f8       	bld	r14, 3
    1096:	02 c0       	rjmp	.+4      	; 0x109c <main+0x772>
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    1098:	ee 24       	eor	r14, r14
    109a:	e3 94       	inc	r14
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						hlcd_writeString((uint8 *)"Wrong input");//print error message
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    109c:	11 53       	subi	r17, 0x31	; 49
    109e:	14 30       	cpi	r17, 0x04	; 4
    10a0:	08 f4       	brcc	.+2      	; 0x10a4 <main+0x77a>
    10a2:	2b c1       	rjmp	.+598    	; 0x12fa <main+0x9d0>
    10a4:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    10a8:	88 23       	and	r24, r24
    10aa:	09 f4       	brne	.+2      	; 0x10ae <main+0x784>
    10ac:	b2 cf       	rjmp	.-156    	; 0x1012 <main+0x6e8>
    10ae:	25 c1       	rjmp	.+586    	; 0x12fa <main+0x9d0>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    10b0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"1:Set temperature ");
    10b4:	87 ef       	ldi	r24, 0xF7	; 247
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					hlcd_goToRowCol(2,1);
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
					hlcd_writeString((uint8 *)"2:Control  0:RET");
    10c4:	8a e0       	ldi	r24, 0x0A	; 10
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    10cc:	80 2f       	mov	r24, r16
    10ce:	0e 94 b0 09 	call	0x1360	; 0x1360 <u8GetKeyPressed>
    10d2:	18 2f       	mov	r17, r24
    10d4:	9f ef       	ldi	r25, 0xFF	; 255
    10d6:	20 e7       	ldi	r18, 0x70	; 112
    10d8:	32 e0       	ldi	r19, 0x02	; 2
    10da:	91 50       	subi	r25, 0x01	; 1
    10dc:	20 40       	sbci	r18, 0x00	; 0
    10de:	30 40       	sbci	r19, 0x00	; 0
    10e0:	e1 f7       	brne	.-8      	; 0x10da <main+0x7b0>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <main+0x7ba>
    10e4:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
    10e6:	81 33       	cpi	r24, 0x31	; 49
    10e8:	b1 f0       	breq	.+44     	; 0x1116 <main+0x7ec>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
    10ea:	82 33       	cpi	r24, 0x32	; 50
    10ec:	c9 f0       	breq	.+50     	; 0x1120 <main+0x7f6>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
    10ee:	80 33       	cpi	r24, 0x30	; 48
    10f0:	e1 f0       	breq	.+56     	; 0x112a <main+0x800>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	e9 f0       	breq	.+58     	; 0x1130 <main+0x806>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    10f6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong input");//print error message
    10fa:	87 ec       	ldi	r24, 0xC7	; 199
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	94 e3       	ldi	r25, 0x34	; 52
    1106:	2c e0       	ldi	r18, 0x0C	; 12
    1108:	81 50       	subi	r24, 0x01	; 1
    110a:	90 40       	sbci	r25, 0x00	; 0
    110c:	20 40       	sbci	r18, 0x00	; 0
    110e:	e1 f7       	brne	.-8      	; 0x1108 <main+0x7de>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <main+0x7e8>
    1112:	00 00       	nop
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <main+0x806>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
    1116:	0f 2e       	mov	r0, r31
    1118:	fa e0       	ldi	r31, 0x0A	; 10
    111a:	ef 2e       	mov	r14, r31
    111c:	f0 2d       	mov	r31, r0
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <main+0x806>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
    1120:	0f 2e       	mov	r0, r31
    1122:	f9 e0       	ldi	r31, 0x09	; 9
    1124:	ef 2e       	mov	r14, r31
    1126:	f0 2d       	mov	r31, r0
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <main+0x806>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    112a:	68 94       	set
    112c:	ee 24       	eor	r14, r14
    112e:	e1 f8       	bld	r14, 1
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						hlcd_writeString((uint8 *)"Wrong input");//print error message
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    1130:	10 53       	subi	r17, 0x30	; 48
    1132:	13 30       	cpi	r17, 0x03	; 3
    1134:	08 f4       	brcc	.+2      	; 0x1138 <main+0x80e>
    1136:	e1 c0       	rjmp	.+450    	; 0x12fa <main+0x9d0>
    1138:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    113c:	88 23       	and	r24, r24
    113e:	09 f4       	brne	.+2      	; 0x1142 <main+0x818>
    1140:	b7 cf       	rjmp	.-146    	; 0x10b0 <main+0x786>
    1142:	db c0       	rjmp	.+438    	; 0x12fa <main+0x9d0>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
    1144:	60 2f       	mov	r22, r16
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    114c:	ee 24       	eor	r14, r14
    114e:	e3 94       	inc	r14
				break;//End of room1 menu case
    1150:	d4 c0       	rjmp	.+424    	; 0x12fa <main+0x9d0>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
    1152:	60 2f       	mov	r22, r16
    1154:	84 e0       	ldi	r24, 0x04	; 4
    1156:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    115a:	ee 24       	eor	r14, r14
    115c:	e3 94       	inc	r14
				break;//End of room2 menu case
    115e:	cd c0       	rjmp	.+410    	; 0x12fa <main+0x9d0>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
    1160:	60 2f       	mov	r22, r16
    1162:	85 e0       	ldi	r24, 0x05	; 5
    1164:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    1168:	ee 24       	eor	r14, r14
    116a:	e3 94       	inc	r14
				break;//End of room3 menu case
    116c:	c6 c0       	rjmp	.+396    	; 0x12fa <main+0x9d0>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
    116e:	60 2f       	mov	r22, r16
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
    1176:	02 30       	cpi	r16, 0x02	; 2
    1178:	09 f0       	breq	.+2      	; 0x117c <main+0x852>
    117a:	b0 c0       	rjmp	.+352    	; 0x12dc <main+0x9b2>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    117c:	ee 24       	eor	r14, r14
    117e:	e3 94       	inc	r14
    1180:	bc c0       	rjmp	.+376    	; 0x12fa <main+0x9d0>
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
				}
				break;//End of room4 menu case
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
    1182:	60 2f       	mov	r22, r16
    1184:	87 e0       	ldi	r24, 0x07	; 7
    1186:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    118a:	68 94       	set
    118c:	ee 24       	eor	r14, r14
    118e:	e1 f8       	bld	r14, 1
				break;//End of TV menu case
    1190:	b4 c0       	rjmp	.+360    	; 0x12fa <main+0x9d0>
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
    1192:	60 2f       	mov	r22, r16
    1194:	89 e0       	ldi	r24, 0x09	; 9
    1196:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    119a:	68 94       	set
    119c:	ee 24       	eor	r14, r14
    119e:	e3 f8       	bld	r14, 3
				break;//End of air conditioning control menu case
    11a0:	ac c0       	rjmp	.+344    	; 0x12fa <main+0x9d0>
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    11a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"Set temp.:__ ");//print the format of inserting temperature
    11a6:	8b e1       	ldi	r24, 0x1B	; 27
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
					hlcd_writeChar(DEGREES_SYMBOL); // print the symbol of degree
    11ae:	8f ed       	ldi	r24, 0xDF	; 223
    11b0:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
					hlcd_writeChar('C'); // print the C character
    11b4:	83 e4       	ldi	r24, 0x43	; 67
    11b6:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
					hlcd_goToRowCol(1,11);//move the cursor to the place to write the entered temperature
    11ba:	6b e0       	ldi	r22, 0x0B	; 11
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	81 ee       	ldi	r24, 0xE1	; 225
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	31 50       	subi	r19, 0x01	; 1
    11ca:	80 40       	sbci	r24, 0x00	; 0
    11cc:	90 40       	sbci	r25, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <main+0x89e>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <main+0x8a8>
    11d2:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    11d4:	80 2f       	mov	r24, r16
    11d6:	0e 94 b0 09 	call	0x1360	; 0x1360 <u8GetKeyPressed>
    11da:	2f e7       	ldi	r18, 0x7F	; 127
    11dc:	3a e1       	ldi	r19, 0x1A	; 26
    11de:	96 e0       	ldi	r25, 0x06	; 6
    11e0:	21 50       	subi	r18, 0x01	; 1
    11e2:	30 40       	sbci	r19, 0x00	; 0
    11e4:	90 40       	sbci	r25, 0x00	; 0
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <main+0x8b6>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <main+0x8c0>
    11ea:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
    11ec:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <__data_end>
    11f0:	91 30       	cpi	r25, 0x01	; 1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <main+0x8cc>
    11f4:	77 c0       	rjmp	.+238    	; 0x12e4 <main+0x9ba>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
    11f6:	10 ed       	ldi	r17, 0xD0	; 208
    11f8:	18 0f       	add	r17, r24
    11fa:	1a 30       	cpi	r17, 0x0A	; 10
    11fc:	80 f0       	brcs	.+32     	; 0x121e <main+0x8f4>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    11fe:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong input");//print error message
    1202:	87 ec       	ldi	r24, 0xC7	; 199
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    120a:	2f ef       	ldi	r18, 0xFF	; 255
    120c:	34 e3       	ldi	r19, 0x34	; 52
    120e:	8c e0       	ldi	r24, 0x0C	; 12
    1210:	21 50       	subi	r18, 0x01	; 1
    1212:	30 40       	sbci	r19, 0x00	; 0
    1214:	80 40       	sbci	r24, 0x00	; 0
    1216:	e1 f7       	brne	.-8      	; 0x1210 <main+0x8e6>
    1218:	00 c0       	rjmp	.+0      	; 0x121a <main+0x8f0>
    121a:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
    121c:	54 c0       	rjmp	.+168    	; 0x12c6 <main+0x99c>
					}
					else//if the value is valid
					{
						hlcd_writeChar(key_pressed);//print the value on the lcd
    121e:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    1222:	80 2f       	mov	r24, r16
    1224:	0e 94 b0 09 	call	0x1360	; 0x1360 <u8GetKeyPressed>
    1228:	9f e7       	ldi	r25, 0x7F	; 127
    122a:	2a e1       	ldi	r18, 0x1A	; 26
    122c:	36 e0       	ldi	r19, 0x06	; 6
    122e:	91 50       	subi	r25, 0x01	; 1
    1230:	20 40       	sbci	r18, 0x00	; 0
    1232:	30 40       	sbci	r19, 0x00	; 0
    1234:	e1 f7       	brne	.-8      	; 0x122e <main+0x904>
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <main+0x90e>
    1238:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key
					
					if (timeout_flag == TRUE)//if the user session is timeout
    123a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <__data_end>
    123e:	91 30       	cpi	r25, 0x01	; 1
    1240:	09 f4       	brne	.+2      	; 0x1244 <main+0x91a>
    1242:	54 c0       	rjmp	.+168    	; 0x12ec <main+0x9c2>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
    1244:	0f 2e       	mov	r0, r31
    1246:	f0 ed       	ldi	r31, 0xD0	; 208
    1248:	df 2e       	mov	r13, r31
    124a:	f0 2d       	mov	r31, r0
    124c:	d8 0e       	add	r13, r24
    124e:	99 e0       	ldi	r25, 0x09	; 9
    1250:	9d 15       	cp	r25, r13
    1252:	80 f4       	brcc	.+32     	; 0x1274 <main+0x94a>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1254:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
						hlcd_writeString((uint8 *)"Wrong input");//print error message
    1258:	87 ec       	ldi	r24, 0xC7	; 199
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    1260:	2f ef       	ldi	r18, 0xFF	; 255
    1262:	34 e3       	ldi	r19, 0x34	; 52
    1264:	8c e0       	ldi	r24, 0x0C	; 12
    1266:	21 50       	subi	r18, 0x01	; 1
    1268:	30 40       	sbci	r19, 0x00	; 0
    126a:	80 40       	sbci	r24, 0x00	; 0
    126c:	e1 f7       	brne	.-8      	; 0x1266 <main+0x93c>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <main+0x946>
    1270:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
    1272:	29 c0       	rjmp	.+82     	; 0x12c6 <main+0x99c>
					}
					else//if the value is valid
					{
						hlcd_writeChar(key_pressed);//print the value on the lcd
    1274:	0e 94 c9 03 	call	0x792	; 0x792 <hlcd_writeChar>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
    1278:	11 0f       	add	r17, r17
    127a:	e1 2e       	mov	r14, r17
    127c:	ee 0c       	add	r14, r14
    127e:	ee 0c       	add	r14, r14
    1280:	1e 0d       	add	r17, r14
    1282:	e1 2e       	mov	r14, r17
    1284:	ed 0c       	add	r14, r13
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
    1286:	80 e4       	ldi	r24, 0x40	; 64
    1288:	0e 94 90 0a 	call	0x1520	; 0x1520 <SPI_ui8TransmitRecive>
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	21 ee       	ldi	r18, 0xE1	; 225
    1290:	34 e0       	ldi	r19, 0x04	; 4
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	20 40       	sbci	r18, 0x00	; 0
    1296:	30 40       	sbci	r19, 0x00	; 0
    1298:	e1 f7       	brne	.-8      	; 0x1292 <main+0x968>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <main+0x972>
    129c:	00 00       	nop
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
    129e:	8e 2d       	mov	r24, r14
    12a0:	0e 94 90 0a 	call	0x1520	; 0x1520 <SPI_ui8TransmitRecive>
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    12a4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
					hlcd_writeString((uint8 *)"Temperature Sent");//show the message
    12a8:	89 e2       	ldi	r24, 0x29	; 41
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	94 e3       	ldi	r25, 0x34	; 52
    12b4:	2c e0       	ldi	r18, 0x0C	; 12
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	90 40       	sbci	r25, 0x00	; 0
    12ba:	20 40       	sbci	r18, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <main+0x98c>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <main+0x996>
    12c0:	00 00       	nop
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <main+0x99c>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
    12c4:	e1 2c       	mov	r14, r1
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
    12c6:	e1 10       	cpse	r14, r1
    12c8:	15 c0       	rjmp	.+42     	; 0x12f4 <main+0x9ca>
    12ca:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    12ce:	88 23       	and	r24, r24
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <main+0x9aa>
    12d2:	67 cf       	rjmp	.-306    	; 0x11a2 <main+0x878>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					hlcd_writeString((uint8 *)"Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    12d4:	68 94       	set
    12d6:	ee 24       	eor	r14, r14
    12d8:	e3 f8       	bld	r14, 3
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <main+0x9d0>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    12dc:	68 94       	set
    12de:	ee 24       	eor	r14, r14
    12e0:	e1 f8       	bld	r14, 1
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <main+0x9d0>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					hlcd_writeString((uint8 *)"Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    12e4:	68 94       	set
    12e6:	ee 24       	eor	r14, r14
    12e8:	e3 f8       	bld	r14, 3
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <main+0x9d0>
    12ec:	68 94       	set
    12ee:	ee 24       	eor	r14, r14
    12f0:	e3 f8       	bld	r14, 3
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <main+0x9d0>
    12f4:	68 94       	set
    12f6:	ee 24       	eor	r14, r14
    12f8:	e3 f8       	bld	r14, 3
		
		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
    12fa:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	09 f0       	breq	.+2      	; 0x1304 <main+0x9da>
    1302:	17 ce       	rjmp	.-978    	; 0xf32 <main+0x608>
    1304:	2d cc       	rjmp	.-1958   	; 0xb60 <main+0x236>

00001306 <__vector_10>:
		}//End of while that repeats the menu after each successful action till session timeout
	}// end of the main while(1)
}//end of main function

ISR(TIMER0_COMP_vect)
{
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
	session_counter++;//increase the indicator of session time for every tick
    1314:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <session_counter>
    1318:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <session_counter+0x1>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <session_counter+0x1>
    1322:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <session_counter>
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	0f 90       	pop	r0
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	0f 90       	pop	r0
    1330:	1f 90       	pop	r1
    1332:	18 95       	reti

00001334 <ui8ComparePass>:

extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
    1334:	dc 01       	movw	r26, r24
	uint8 pin_counter=0;//the offset of the character of the pin
    1336:	90 e0       	ldi	r25, 0x00	; 0
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <ui8ComparePass+0x20>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
    133a:	29 2f       	mov	r18, r25
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	fd 01       	movw	r30, r26
    1340:	e2 0f       	add	r30, r18
    1342:	f3 1f       	adc	r31, r19
    1344:	50 81       	ld	r21, Z
    1346:	fb 01       	movw	r30, r22
    1348:	e2 0f       	add	r30, r18
    134a:	f3 1f       	adc	r31, r19
    134c:	20 81       	ld	r18, Z
    134e:	52 13       	cpse	r21, r18
    1350:	05 c0       	rjmp	.+10     	; 0x135c <ui8ComparePass+0x28>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
    1352:	9f 5f       	subi	r25, 0xFF	; 255

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
    1354:	94 17       	cp	r25, r20
    1356:	88 f3       	brcs	.-30     	; 0x133a <ui8ComparePass+0x6>
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
    135c:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
    135e:	08 95       	ret

00001360 <u8GetKeyPressed>:
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
    1360:	cf 93       	push	r28
    1362:	c8 2f       	mov	r28, r24
	uint8 key_pressed = NOT_PRESSED;
    1364:	8f ef       	ldi	r24, 0xFF	; 255
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    1366:	18 c0       	rjmp	.+48     	; 0x1398 <u8GetKeyPressed+0x38>
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
    1368:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <session_counter>
    136c:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <session_counter+0x1>
    1370:	28 3b       	cpi	r18, 0xB8	; 184
    1372:	3b 40       	sbci	r19, 0x0B	; 11
    1374:	10 f0       	brcs	.+4      	; 0x137a <u8GetKeyPressed+0x1a>
    1376:	c1 30       	cpi	r28, 0x01	; 1
    1378:	49 f0       	breq	.+18     	; 0x138c <u8GetKeyPressed+0x2c>
    137a:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <session_counter>
    137e:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <session_counter+0x1>
    1382:	20 3d       	cpi	r18, 0xD0	; 208
    1384:	37 40       	sbci	r19, 0x07	; 7
    1386:	30 f0       	brcs	.+12     	; 0x1394 <u8GetKeyPressed+0x34>
    1388:	c2 30       	cpi	r28, 0x02	; 2
    138a:	21 f4       	brne	.+8      	; 0x1394 <u8GetKeyPressed+0x34>
		{
			timeout_flag = TRUE;//set timeout flag to true
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <__data_end>
			break;//break the loop that wait for input from the user
    1392:	04 c0       	rjmp	.+8      	; 0x139c <u8GetKeyPressed+0x3c>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    1394:	0e 94 24 04 	call	0x848	; 0x848 <keypad_u8check_press>
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	31 f3       	breq	.-52     	; 0x1368 <u8GetKeyPressed+0x8>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <vMenuOption>:
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	d8 2f       	mov	r29, r24
    13ae:	f6 2e       	mov	r15, r22
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
    13b0:	e1 2c       	mov	r14, r1
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
    13b2:	00 e0       	ldi	r16, 0x00	; 0
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
    13b4:	10 e0       	ldi	r17, 0x00	; 0
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	
	do
	{
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    13b6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
    13ba:	d5 30       	cpi	r29, 0x05	; 5
    13bc:	11 f1       	breq	.+68     	; 0x1402 <vMenuOption+0x62>
    13be:	28 f4       	brcc	.+10     	; 0x13ca <vMenuOption+0x2a>
    13c0:	d3 30       	cpi	r29, 0x03	; 3
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <vMenuOption+0x36>
    13c4:	d4 30       	cpi	r29, 0x04	; 4
    13c6:	91 f0       	breq	.+36     	; 0x13ec <vMenuOption+0x4c>
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <vMenuOption+0xb8>
    13ca:	d7 30       	cpi	r29, 0x07	; 7
    13cc:	81 f1       	breq	.+96     	; 0x142e <vMenuOption+0x8e>
    13ce:	20 f1       	brcs	.+72     	; 0x1418 <vMenuOption+0x78>
    13d0:	d9 30       	cpi	r29, 0x09	; 9
    13d2:	c1 f1       	breq	.+112    	; 0x1444 <vMenuOption+0xa4>
    13d4:	41 c0       	rjmp	.+130    	; 0x1458 <vMenuOption+0xb8>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
    13d6:	8a e3       	ldi	r24, 0x3A	; 58
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
    13de:	0f 2e       	mov	r0, r31
    13e0:	f1 e3       	ldi	r31, 0x31	; 49
    13e2:	ef 2e       	mov	r14, r31
    13e4:	f0 2d       	mov	r31, r0
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
    13e6:	01 e2       	ldi	r16, 0x21	; 33
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    13e8:	11 e1       	ldi	r17, 0x11	; 17
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
    13ea:	36 c0       	rjmp	.+108    	; 0x1458 <vMenuOption+0xb8>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
    13ec:	83 e4       	ldi	r24, 0x43	; 67
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
    13f4:	0f 2e       	mov	r0, r31
    13f6:	f2 e3       	ldi	r31, 0x32	; 50
    13f8:	ef 2e       	mov	r14, r31
    13fa:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
    13fc:	02 e2       	ldi	r16, 0x22	; 34
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    13fe:	12 e1       	ldi	r17, 0x12	; 18
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
    1400:	2b c0       	rjmp	.+86     	; 0x1458 <vMenuOption+0xb8>
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
    1402:	8c e4       	ldi	r24, 0x4C	; 76
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
    140a:	0f 2e       	mov	r0, r31
    140c:	f3 e3       	ldi	r31, 0x33	; 51
    140e:	ef 2e       	mov	r14, r31
    1410:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
    1412:	03 e2       	ldi	r16, 0x23	; 35
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    1414:	13 e1       	ldi	r17, 0x13	; 19
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
    1416:	20 c0       	rjmp	.+64     	; 0x1458 <vMenuOption+0xb8>
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
    1418:	85 e5       	ldi	r24, 0x55	; 85
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
    1420:	0f 2e       	mov	r0, r31
    1422:	f4 e3       	ldi	r31, 0x34	; 52
    1424:	ef 2e       	mov	r14, r31
    1426:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
    1428:	04 e2       	ldi	r16, 0x24	; 36
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    142a:	14 e1       	ldi	r17, 0x14	; 20
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
    142c:	15 c0       	rjmp	.+42     	; 0x1458 <vMenuOption+0xb8>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
    142e:	8e e5       	ldi	r24, 0x5E	; 94
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
    1436:	0f 2e       	mov	r0, r31
    1438:	f5 e3       	ldi	r31, 0x35	; 53
    143a:	ef 2e       	mov	r14, r31
    143c:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
    143e:	05 e2       	ldi	r16, 0x25	; 37
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
    1440:	15 e1       	ldi	r17, 0x15	; 21
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
    1442:	0a c0       	rjmp	.+20     	; 0x1458 <vMenuOption+0xb8>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			hlcd_writeString("Air Cond. S:");
    1444:	84 e6       	ldi	r24, 0x64	; 100
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
    144c:	0f 2e       	mov	r0, r31
    144e:	f6 e3       	ldi	r31, 0x36	; 54
    1450:	ef 2e       	mov	r14, r31
    1452:	f0 2d       	mov	r31, r0
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
    1454:	06 e2       	ldi	r16, 0x26	; 38
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    1456:	16 e1       	ldi	r17, 0x16	; 22
			hlcd_writeString("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
    1458:	81 2f       	mov	r24, r17
    145a:	0e 94 90 0a 	call	0x1520	; 0x1520 <SPI_ui8TransmitRecive>
    145e:	2f ef       	ldi	r18, 0xFF	; 255
    1460:	80 e7       	ldi	r24, 0x70	; 112
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	21 50       	subi	r18, 0x01	; 1
    1466:	80 40       	sbci	r24, 0x00	; 0
    1468:	90 40       	sbci	r25, 0x00	; 0
    146a:	e1 f7       	brne	.-8      	; 0x1464 <vMenuOption+0xc4>
    146c:	00 c0       	rjmp	.+0      	; 0x146e <vMenuOption+0xce>
    146e:	00 00       	nop
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	0e 94 90 0a 	call	0x1520	; 0x1520 <SPI_ui8TransmitRecive>
		if(response == ON_STATUS)//if the response from the slave was on status
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	29 f4       	brne	.+10     	; 0x1484 <vMenuOption+0xe4>
		{
			hlcd_writeString("ON");//print the status on
    147a:	81 e7       	ldi	r24, 0x71	; 113
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    1482:	04 c0       	rjmp	.+8      	; 0x148c <vMenuOption+0xec>
		}
		else//if the response from the slave was off status
		{
			hlcd_writeString("OFF");//print the status off
    1484:	84 e7       	ldi	r24, 0x74	; 116
    1486:	92 e0       	ldi	r25, 0x02	; 2
    1488:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		}

		hlcd_goToRowCol(2,1);//move the cursor to the start of the second line
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <hlcd_goToRowCol>
		hlcd_writeString("1-On 2-Off 0-RET");//print the sub menu
    1494:	88 e7       	ldi	r24, 0x78	; 120
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
    149c:	8f 2d       	mov	r24, r15
    149e:	0e 94 b0 09 	call	0x1360	; 0x1360 <u8GetKeyPressed>
    14a2:	c8 2f       	mov	r28, r24
    14a4:	2f ef       	ldi	r18, 0xFF	; 255
    14a6:	80 e7       	ldi	r24, 0x70	; 112
    14a8:	92 e0       	ldi	r25, 0x02	; 2
    14aa:	21 50       	subi	r18, 0x01	; 1
    14ac:	80 40       	sbci	r24, 0x00	; 0
    14ae:	90 40       	sbci	r25, 0x00	; 0
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <vMenuOption+0x10a>
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <vMenuOption+0x114>
    14b4:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
    14b6:	c1 33       	cpi	r28, 0x31	; 49
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <vMenuOption+0x122>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
    14ba:	80 2f       	mov	r24, r16
    14bc:	0e 94 90 0a 	call	0x1520	; 0x1520 <SPI_ui8TransmitRecive>
    14c0:	19 c0       	rjmp	.+50     	; 0x14f4 <vMenuOption+0x154>
		}
		else if (key_pressed == '2')
    14c2:	c2 33       	cpi	r28, 0x32	; 50
    14c4:	21 f4       	brne	.+8      	; 0x14ce <vMenuOption+0x12e>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
    14c6:	8e 2d       	mov	r24, r14
    14c8:	0e 94 90 0a 	call	0x1520	; 0x1520 <SPI_ui8TransmitRecive>
    14cc:	13 c0       	rjmp	.+38     	; 0x14f4 <vMenuOption+0x154>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
    14ce:	cf 3f       	cpi	r28, 0xFF	; 255
    14d0:	89 f0       	breq	.+34     	; 0x14f4 <vMenuOption+0x154>
    14d2:	c0 33       	cpi	r28, 0x30	; 48
    14d4:	79 f0       	breq	.+30     	; 0x14f4 <vMenuOption+0x154>
		{
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    14d6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <hlcd_clearLCD>
			hlcd_writeString("Wrong input");//print error message
    14da:	87 ec       	ldi	r24, 0xC7	; 199
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 cc 03 	call	0x798	; 0x798 <hlcd_writeString>
    14e2:	2f ef       	ldi	r18, 0xFF	; 255
    14e4:	84 e3       	ldi	r24, 0x34	; 52
    14e6:	9c e0       	ldi	r25, 0x0C	; 12
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <vMenuOption+0x148>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <vMenuOption+0x152>
    14f2:	00 00       	nop
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    14f4:	c0 53       	subi	r28, 0x30	; 48
    14f6:	c3 30       	cpi	r28, 0x03	; 3
    14f8:	28 f0       	brcs	.+10     	; 0x1504 <vMenuOption+0x164>
    14fa:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    14fe:	88 23       	and	r24, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <vMenuOption+0x164>
    1502:	59 cf       	rjmp	.-334    	; 0x13b6 <vMenuOption+0x16>
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	08 95       	ret

00001512 <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    1512:	87 b3       	in	r24, 0x17	; 23
    1514:	80 6b       	ori	r24, 0xB0	; 176
    1516:	87 bb       	out	0x17, r24	; 23
    1518:	8d b1       	in	r24, 0x0d	; 13
    151a:	81 65       	ori	r24, 0x51	; 81
    151c:	8d b9       	out	0x0d, r24	; 13
    151e:	08 95       	ret

00001520 <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
    1520:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1522:	77 9b       	sbis	0x0e, 7	; 14
    1524:	fe cf       	rjmp	.-4      	; 0x1522 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1526:	8f b1       	in	r24, 0x0f	; 15
    1528:	08 95       	ret

0000152a <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    152a:	8e e4       	ldi	r24, 0x4E	; 78
    152c:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    152e:	83 b7       	in	r24, 0x33	; 51
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
    1534:	83 b7       	in	r24, 0x33	; 51
    1536:	8f 7b       	andi	r24, 0xBF	; 191
    1538:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    153a:	83 b7       	in	r24, 0x33	; 51
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    1540:	83 b7       	in	r24, 0x33	; 51
    1542:	8d 7f       	andi	r24, 0xFD	; 253
    1544:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
    1546:	83 b7       	in	r24, 0x33	; 51
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
    154c:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    154e:	89 b7       	in	r24, 0x39	; 57
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	89 bf       	out	0x39, r24	; 57
    1554:	08 95       	ret

00001556 <timer0_stop>:
}

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    1556:	83 b7       	in	r24, 0x33	; 51
    1558:	8e 7f       	andi	r24, 0xFE	; 254
    155a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    155c:	83 b7       	in	r24, 0x33	; 51
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
    1562:	83 b7       	in	r24, 0x33	; 51
    1564:	8b 7f       	andi	r24, 0xFB	; 251
    1566:	83 bf       	out	0x33, r24	; 51
    1568:	08 95       	ret

0000156a <__tablejump2__>:
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	05 90       	lpm	r0, Z+
    1570:	f4 91       	lpm	r31, Z
    1572:	e0 2d       	mov	r30, r0
    1574:	09 94       	ijmp

00001576 <_exit>:
    1576:	f8 94       	cli

00001578 <__stop_program>:
    1578:	ff cf       	rjmp	.-2      	; 0x1578 <__stop_program>
